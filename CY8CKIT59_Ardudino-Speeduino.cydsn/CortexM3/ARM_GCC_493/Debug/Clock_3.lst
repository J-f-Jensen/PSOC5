ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Clock_3.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.Clock_3_Start,"ax",%progbits
  19              		.align	2
  20              		.global	Clock_3_Start
  21              		.thumb
  22              		.thumb_func
  23              		.type	Clock_3_Start, %function
  24              	Clock_3_Start:
  25              	.LFB0:
  26              		.file 1 "Generated_Source\\PSoC5\\Clock_3.c"
   1:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/Clock_3.c **** * File Name: Clock_3.c
   3:Generated_Source\PSoC5/Clock_3.c **** * Version 2.20
   4:Generated_Source\PSoC5/Clock_3.c **** *
   5:Generated_Source\PSoC5/Clock_3.c **** *  Description:
   6:Generated_Source\PSoC5/Clock_3.c **** *   This file provides the source code to the API for the clock component.
   7:Generated_Source\PSoC5/Clock_3.c **** *
   8:Generated_Source\PSoC5/Clock_3.c **** *  Note:
   9:Generated_Source\PSoC5/Clock_3.c **** *
  10:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
  11:Generated_Source\PSoC5/Clock_3.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC5/Clock_3.c **** * You may use this file only in accordance with the license, terms, conditions, 
  13:Generated_Source\PSoC5/Clock_3.c **** * disclaimers, and limitations in the end user license agreement accompanying 
  14:Generated_Source\PSoC5/Clock_3.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
  16:Generated_Source\PSoC5/Clock_3.c **** 
  17:Generated_Source\PSoC5/Clock_3.c **** #include <cydevice_trm.h>
  18:Generated_Source\PSoC5/Clock_3.c **** #include "Clock_3.h"
  19:Generated_Source\PSoC5/Clock_3.c **** 
  20:Generated_Source\PSoC5/Clock_3.c **** /* Clock Distribution registers. */
  21:Generated_Source\PSoC5/Clock_3.c **** #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22:Generated_Source\PSoC5/Clock_3.c **** #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23:Generated_Source\PSoC5/Clock_3.c **** #define BCFG2_MASK               (0x80u)
  24:Generated_Source\PSoC5/Clock_3.c **** #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25:Generated_Source\PSoC5/Clock_3.c **** #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26:Generated_Source\PSoC5/Clock_3.c **** 
  27:Generated_Source\PSoC5/Clock_3.c **** #define HAS_CLKDIST_LD_DISABLE   (CY_PSOC3 || CY_PSOC5LP)
  28:Generated_Source\PSoC5/Clock_3.c **** 
  29:Generated_Source\PSoC5/Clock_3.c **** 
  30:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_Start
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 2


  32:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
  33:Generated_Source\PSoC5/Clock_3.c **** *
  34:Generated_Source\PSoC5/Clock_3.c **** * Summary:
  35:Generated_Source\PSoC5/Clock_3.c **** *  Starts the clock. Note that on startup, clocks may be already running if the
  36:Generated_Source\PSoC5/Clock_3.c **** *  "Start on Reset" option is enabled in the DWR.
  37:Generated_Source\PSoC5/Clock_3.c **** *
  38:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
  39:Generated_Source\PSoC5/Clock_3.c **** *  None
  40:Generated_Source\PSoC5/Clock_3.c **** *
  41:Generated_Source\PSoC5/Clock_3.c **** * Returns:
  42:Generated_Source\PSoC5/Clock_3.c **** *  None
  43:Generated_Source\PSoC5/Clock_3.c **** *
  44:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
  45:Generated_Source\PSoC5/Clock_3.c **** void Clock_3_Start(void) 
  46:Generated_Source\PSoC5/Clock_3.c **** {
  27              		.loc 1 46 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  47:Generated_Source\PSoC5/Clock_3.c ****     /* Set the bit to enable the clock. */
  48:Generated_Source\PSoC5/Clock_3.c ****     Clock_3_CLKEN |= Clock_3_CLKEN_MASK;
  37              		.loc 1 48 0
  38 0004 094A     		ldr	r2, .L2
  39 0006 094B     		ldr	r3, .L2
  40 0008 1B78     		ldrb	r3, [r3]
  41 000a DBB2     		uxtb	r3, r3
  42 000c 63F07F03 		orn	r3, r3, #127
  43 0010 DBB2     		uxtb	r3, r3
  44 0012 1370     		strb	r3, [r2]
  49:Generated_Source\PSoC5/Clock_3.c **** 	Clock_3_CLKSTBY |= Clock_3_CLKSTBY_MASK;
  45              		.loc 1 49 0
  46 0014 064A     		ldr	r2, .L2+4
  47 0016 064B     		ldr	r3, .L2+4
  48 0018 1B78     		ldrb	r3, [r3]
  49 001a DBB2     		uxtb	r3, r3
  50 001c 63F07F03 		orn	r3, r3, #127
  51 0020 DBB2     		uxtb	r3, r3
  52 0022 1370     		strb	r3, [r2]
  50:Generated_Source\PSoC5/Clock_3.c **** }
  53              		.loc 1 50 0
  54 0024 BD46     		mov	sp, r7
  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 0026 5DF8047B 		ldr	r7, [sp], #4
  58              		.cfi_restore 7
  59              		.cfi_def_cfa_offset 0
  60 002a 7047     		bx	lr
  61              	.L3:
  62              		.align	2
  63              	.L2:
  64 002c A2430040 		.word	1073759138
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 3


  65 0030 B2430040 		.word	1073759154
  66              		.cfi_endproc
  67              	.LFE0:
  68              		.size	Clock_3_Start, .-Clock_3_Start
  69              		.section	.text.Clock_3_Stop,"ax",%progbits
  70              		.align	2
  71              		.global	Clock_3_Stop
  72              		.thumb
  73              		.thumb_func
  74              		.type	Clock_3_Stop, %function
  75              	Clock_3_Stop:
  76              	.LFB1:
  51:Generated_Source\PSoC5/Clock_3.c **** 
  52:Generated_Source\PSoC5/Clock_3.c **** 
  53:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
  54:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_Stop
  55:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
  56:Generated_Source\PSoC5/Clock_3.c **** *
  57:Generated_Source\PSoC5/Clock_3.c **** * Summary:
  58:Generated_Source\PSoC5/Clock_3.c **** *  Stops the clock and returns immediately. This API does not require the
  59:Generated_Source\PSoC5/Clock_3.c **** *  source clock to be running but may return before the hardware is actually
  60:Generated_Source\PSoC5/Clock_3.c **** *  disabled. If the settings of the clock are changed after calling this
  61:Generated_Source\PSoC5/Clock_3.c **** *  function, the clock may glitch when it is started. To avoid the clock
  62:Generated_Source\PSoC5/Clock_3.c **** *  glitch, use the StopBlock function.
  63:Generated_Source\PSoC5/Clock_3.c **** *
  64:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
  65:Generated_Source\PSoC5/Clock_3.c **** *  None
  66:Generated_Source\PSoC5/Clock_3.c **** *
  67:Generated_Source\PSoC5/Clock_3.c **** * Returns:
  68:Generated_Source\PSoC5/Clock_3.c **** *  None
  69:Generated_Source\PSoC5/Clock_3.c **** *
  70:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
  71:Generated_Source\PSoC5/Clock_3.c **** void Clock_3_Stop(void) 
  72:Generated_Source\PSoC5/Clock_3.c **** {
  77              		.loc 1 72 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              		.cfi_def_cfa_offset 4
  84              		.cfi_offset 7, -4
  85 0002 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  73:Generated_Source\PSoC5/Clock_3.c ****     /* Clear the bit to disable the clock. */
  74:Generated_Source\PSoC5/Clock_3.c ****     Clock_3_CLKEN &= (uint8)(~Clock_3_CLKEN_MASK);
  87              		.loc 1 74 0
  88 0004 094A     		ldr	r2, .L5
  89 0006 094B     		ldr	r3, .L5
  90 0008 1B78     		ldrb	r3, [r3]
  91 000a DBB2     		uxtb	r3, r3
  92 000c 03F07F03 		and	r3, r3, #127
  93 0010 DBB2     		uxtb	r3, r3
  94 0012 1370     		strb	r3, [r2]
  75:Generated_Source\PSoC5/Clock_3.c **** 	Clock_3_CLKSTBY &= (uint8)(~Clock_3_CLKSTBY_MASK);
  95              		.loc 1 75 0
  96 0014 064A     		ldr	r2, .L5+4
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 4


  97 0016 064B     		ldr	r3, .L5+4
  98 0018 1B78     		ldrb	r3, [r3]
  99 001a DBB2     		uxtb	r3, r3
 100 001c 03F07F03 		and	r3, r3, #127
 101 0020 DBB2     		uxtb	r3, r3
 102 0022 1370     		strb	r3, [r2]
  76:Generated_Source\PSoC5/Clock_3.c **** }
 103              		.loc 1 76 0
 104 0024 BD46     		mov	sp, r7
 105              		.cfi_def_cfa_register 13
 106              		@ sp needed
 107 0026 5DF8047B 		ldr	r7, [sp], #4
 108              		.cfi_restore 7
 109              		.cfi_def_cfa_offset 0
 110 002a 7047     		bx	lr
 111              	.L6:
 112              		.align	2
 113              	.L5:
 114 002c A2430040 		.word	1073759138
 115 0030 B2430040 		.word	1073759154
 116              		.cfi_endproc
 117              	.LFE1:
 118              		.size	Clock_3_Stop, .-Clock_3_Stop
 119              		.section	.text.Clock_3_StopBlock,"ax",%progbits
 120              		.align	2
 121              		.global	Clock_3_StopBlock
 122              		.thumb
 123              		.thumb_func
 124              		.type	Clock_3_StopBlock, %function
 125              	Clock_3_StopBlock:
 126              	.LFB2:
  77:Generated_Source\PSoC5/Clock_3.c **** 
  78:Generated_Source\PSoC5/Clock_3.c **** 
  79:Generated_Source\PSoC5/Clock_3.c **** #if(CY_PSOC3 || CY_PSOC5LP)
  80:Generated_Source\PSoC5/Clock_3.c **** 
  81:Generated_Source\PSoC5/Clock_3.c **** 
  82:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
  83:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_StopBlock
  84:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
  85:Generated_Source\PSoC5/Clock_3.c **** *
  86:Generated_Source\PSoC5/Clock_3.c **** * Summary:
  87:Generated_Source\PSoC5/Clock_3.c **** *  Stops the clock and waits for the hardware to actually be disabled before
  88:Generated_Source\PSoC5/Clock_3.c **** *  returning. This ensures that the clock is never truncated (high part of the
  89:Generated_Source\PSoC5/Clock_3.c **** *  cycle will terminate before the clock is disabled and the API returns).
  90:Generated_Source\PSoC5/Clock_3.c **** *  Note that the source clock must be running or this API will never return as
  91:Generated_Source\PSoC5/Clock_3.c **** *  a stopped clock cannot be disabled.
  92:Generated_Source\PSoC5/Clock_3.c **** *
  93:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
  94:Generated_Source\PSoC5/Clock_3.c **** *  None
  95:Generated_Source\PSoC5/Clock_3.c **** *
  96:Generated_Source\PSoC5/Clock_3.c **** * Returns:
  97:Generated_Source\PSoC5/Clock_3.c **** *  None
  98:Generated_Source\PSoC5/Clock_3.c **** *
  99:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
 100:Generated_Source\PSoC5/Clock_3.c **** void Clock_3_StopBlock(void) 
 101:Generated_Source\PSoC5/Clock_3.c **** {
 127              		.loc 1 101 0
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 5


 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 8
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 80B4     		push	{r7}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 0002 83B0     		sub	sp, sp, #12
 136              		.cfi_def_cfa_offset 16
 137 0004 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 102:Generated_Source\PSoC5/Clock_3.c ****     if ((Clock_3_CLKEN & Clock_3_CLKEN_MASK) != 0u)
 139              		.loc 1 102 0
 140 0006 224B     		ldr	r3, .L10
 141 0008 1B78     		ldrb	r3, [r3]
 142 000a DBB2     		uxtb	r3, r3
 143 000c DBB2     		uxtb	r3, r3
 144 000e 5BB2     		sxtb	r3, r3
 145 0010 002B     		cmp	r3, #0
 146 0012 37DA     		bge	.L7
 147              	.LBB2:
 103:Generated_Source\PSoC5/Clock_3.c ****     {
 104:Generated_Source\PSoC5/Clock_3.c **** #if HAS_CLKDIST_LD_DISABLE
 105:Generated_Source\PSoC5/Clock_3.c ****         uint16 oldDivider;
 106:Generated_Source\PSoC5/Clock_3.c **** 
 107:Generated_Source\PSoC5/Clock_3.c ****         CLK_DIST_LD = 0u;
 148              		.loc 1 107 0
 149 0014 1F4B     		ldr	r3, .L10+4
 150 0016 0022     		movs	r2, #0
 151 0018 1A70     		strb	r2, [r3]
 108:Generated_Source\PSoC5/Clock_3.c **** 
 109:Generated_Source\PSoC5/Clock_3.c ****         /* Clear all the mask bits except ours. */
 110:Generated_Source\PSoC5/Clock_3.c **** #if defined(Clock_3__CFG3)
 111:Generated_Source\PSoC5/Clock_3.c ****         CLK_DIST_AMASK = Clock_3_CLKEN_MASK;
 112:Generated_Source\PSoC5/Clock_3.c ****         CLK_DIST_DMASK = 0x00u;
 113:Generated_Source\PSoC5/Clock_3.c **** #else
 114:Generated_Source\PSoC5/Clock_3.c ****         CLK_DIST_DMASK = Clock_3_CLKEN_MASK;
 152              		.loc 1 114 0
 153 001a 1F4B     		ldr	r3, .L10+8
 154 001c 8022     		movs	r2, #128
 155 001e 1A70     		strb	r2, [r3]
 115:Generated_Source\PSoC5/Clock_3.c ****         CLK_DIST_AMASK = 0x00u;
 156              		.loc 1 115 0
 157 0020 1E4B     		ldr	r3, .L10+12
 158 0022 0022     		movs	r2, #0
 159 0024 1A70     		strb	r2, [r3]
 116:Generated_Source\PSoC5/Clock_3.c **** #endif /* Clock_3__CFG3 */
 117:Generated_Source\PSoC5/Clock_3.c **** 
 118:Generated_Source\PSoC5/Clock_3.c ****         /* Clear mask of bus clock. */
 119:Generated_Source\PSoC5/Clock_3.c ****         CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 160              		.loc 1 119 0
 161 0026 1E4A     		ldr	r2, .L10+16
 162 0028 1D4B     		ldr	r3, .L10+16
 163 002a 1B78     		ldrb	r3, [r3]
 164 002c DBB2     		uxtb	r3, r3
 165 002e 03F07F03 		and	r3, r3, #127
 166 0032 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 6


 167 0034 1370     		strb	r3, [r2]
 120:Generated_Source\PSoC5/Clock_3.c **** 
 121:Generated_Source\PSoC5/Clock_3.c ****         oldDivider = CY_GET_REG16(Clock_3_DIV_PTR);
 168              		.loc 1 121 0
 169 0036 1B4B     		ldr	r3, .L10+20
 170 0038 1B88     		ldrh	r3, [r3]	@ movhi
 171 003a FB80     		strh	r3, [r7, #6]	@ movhi
 122:Generated_Source\PSoC5/Clock_3.c ****         CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 172              		.loc 1 122 0
 173 003c 1A4A     		ldr	r2, .L10+24
 174 003e FB88     		ldrh	r3, [r7, #6]	@ movhi
 175 0040 1380     		strh	r3, [r2]	@ movhi
 123:Generated_Source\PSoC5/Clock_3.c ****         CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
 176              		.loc 1 123 0
 177 0042 144B     		ldr	r3, .L10+4
 178 0044 0722     		movs	r2, #7
 179 0046 1A70     		strb	r2, [r3]
 124:Generated_Source\PSoC5/Clock_3.c **** 
 125:Generated_Source\PSoC5/Clock_3.c ****         /* Wait for clock to be disabled */
 126:Generated_Source\PSoC5/Clock_3.c ****         while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 180              		.loc 1 126 0
 181 0048 00BF     		nop
 182              	.L9:
 183              		.loc 1 126 0 is_stmt 0 discriminator 1
 184 004a 124B     		ldr	r3, .L10+4
 185 004c 1B78     		ldrb	r3, [r3]
 186 004e DBB2     		uxtb	r3, r3
 187 0050 03F00103 		and	r3, r3, #1
 188 0054 002B     		cmp	r3, #0
 189 0056 F8D1     		bne	.L9
 127:Generated_Source\PSoC5/Clock_3.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 128:Generated_Source\PSoC5/Clock_3.c **** 
 129:Generated_Source\PSoC5/Clock_3.c ****         /* Clear the bit to disable the clock. */
 130:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_CLKEN &= (uint8)(~Clock_3_CLKEN_MASK);
 190              		.loc 1 130 0 is_stmt 1
 191 0058 0D4A     		ldr	r2, .L10
 192 005a 0D4B     		ldr	r3, .L10
 193 005c 1B78     		ldrb	r3, [r3]
 194 005e DBB2     		uxtb	r3, r3
 195 0060 03F07F03 		and	r3, r3, #127
 196 0064 DBB2     		uxtb	r3, r3
 197 0066 1370     		strb	r3, [r2]
 131:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_CLKSTBY &= (uint8)(~Clock_3_CLKSTBY_MASK);
 198              		.loc 1 131 0
 199 0068 104A     		ldr	r2, .L10+28
 200 006a 104B     		ldr	r3, .L10+28
 201 006c 1B78     		ldrb	r3, [r3]
 202 006e DBB2     		uxtb	r3, r3
 203 0070 03F07F03 		and	r3, r3, #127
 204 0074 DBB2     		uxtb	r3, r3
 205 0076 1370     		strb	r3, [r2]
 132:Generated_Source\PSoC5/Clock_3.c **** 
 133:Generated_Source\PSoC5/Clock_3.c **** #if HAS_CLKDIST_LD_DISABLE
 134:Generated_Source\PSoC5/Clock_3.c ****         /* Clear the disable bit */
 135:Generated_Source\PSoC5/Clock_3.c ****         CLK_DIST_LD = 0x00u;
 206              		.loc 1 135 0
 207 0078 064B     		ldr	r3, .L10+4
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 7


 208 007a 0022     		movs	r2, #0
 209 007c 1A70     		strb	r2, [r3]
 136:Generated_Source\PSoC5/Clock_3.c ****         CY_SET_REG16(Clock_3_DIV_PTR, oldDivider);
 210              		.loc 1 136 0
 211 007e 094A     		ldr	r2, .L10+20
 212 0080 FB88     		ldrh	r3, [r7, #6]	@ movhi
 213 0082 1380     		strh	r3, [r2]	@ movhi
 214              	.L7:
 215              	.LBE2:
 137:Generated_Source\PSoC5/Clock_3.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 138:Generated_Source\PSoC5/Clock_3.c ****     }
 139:Generated_Source\PSoC5/Clock_3.c **** }
 216              		.loc 1 139 0
 217 0084 0C37     		adds	r7, r7, #12
 218              		.cfi_def_cfa_offset 4
 219 0086 BD46     		mov	sp, r7
 220              		.cfi_def_cfa_register 13
 221              		@ sp needed
 222 0088 5DF8047B 		ldr	r7, [sp], #4
 223              		.cfi_restore 7
 224              		.cfi_def_cfa_offset 0
 225 008c 7047     		bx	lr
 226              	.L11:
 227 008e 00BF     		.align	2
 228              	.L10:
 229 0090 A2430040 		.word	1073759138
 230 0094 01400040 		.word	1073758209
 231 0098 10400040 		.word	1073758224
 232 009c 14400040 		.word	1073758228
 233 00a0 08400040 		.word	1073758216
 234 00a4 9C400040 		.word	1073758364
 235 00a8 02400040 		.word	1073758210
 236 00ac B2430040 		.word	1073759154
 237              		.cfi_endproc
 238              	.LFE2:
 239              		.size	Clock_3_StopBlock, .-Clock_3_StopBlock
 240              		.section	.text.Clock_3_StandbyPower,"ax",%progbits
 241              		.align	2
 242              		.global	Clock_3_StandbyPower
 243              		.thumb
 244              		.thumb_func
 245              		.type	Clock_3_StandbyPower, %function
 246              	Clock_3_StandbyPower:
 247              	.LFB3:
 140:Generated_Source\PSoC5/Clock_3.c **** #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 141:Generated_Source\PSoC5/Clock_3.c **** 
 142:Generated_Source\PSoC5/Clock_3.c **** 
 143:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
 144:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_StandbyPower
 145:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
 146:Generated_Source\PSoC5/Clock_3.c **** *
 147:Generated_Source\PSoC5/Clock_3.c **** * Summary:
 148:Generated_Source\PSoC5/Clock_3.c **** *  Sets whether the clock is active in standby mode.
 149:Generated_Source\PSoC5/Clock_3.c **** *
 150:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
 151:Generated_Source\PSoC5/Clock_3.c **** *  state:  0 to disable clock during standby, nonzero to enable.
 152:Generated_Source\PSoC5/Clock_3.c **** *
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 8


 153:Generated_Source\PSoC5/Clock_3.c **** * Returns:
 154:Generated_Source\PSoC5/Clock_3.c **** *  None
 155:Generated_Source\PSoC5/Clock_3.c **** *
 156:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
 157:Generated_Source\PSoC5/Clock_3.c **** void Clock_3_StandbyPower(uint8 state) 
 158:Generated_Source\PSoC5/Clock_3.c **** {
 248              		.loc 1 158 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 8
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253 0000 80B4     		push	{r7}
 254              		.cfi_def_cfa_offset 4
 255              		.cfi_offset 7, -4
 256 0002 83B0     		sub	sp, sp, #12
 257              		.cfi_def_cfa_offset 16
 258 0004 00AF     		add	r7, sp, #0
 259              		.cfi_def_cfa_register 7
 260 0006 0346     		mov	r3, r0
 261 0008 FB71     		strb	r3, [r7, #7]
 159:Generated_Source\PSoC5/Clock_3.c ****     if(state == 0u)
 262              		.loc 1 159 0
 263 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 264 000c 002B     		cmp	r3, #0
 265 000e 08D1     		bne	.L13
 160:Generated_Source\PSoC5/Clock_3.c ****     {
 161:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_CLKSTBY &= (uint8)(~Clock_3_CLKSTBY_MASK);
 266              		.loc 1 161 0
 267 0010 0A4A     		ldr	r2, .L15
 268 0012 0A4B     		ldr	r3, .L15
 269 0014 1B78     		ldrb	r3, [r3]
 270 0016 DBB2     		uxtb	r3, r3
 271 0018 03F07F03 		and	r3, r3, #127
 272 001c DBB2     		uxtb	r3, r3
 273 001e 1370     		strb	r3, [r2]
 274 0020 07E0     		b	.L12
 275              	.L13:
 162:Generated_Source\PSoC5/Clock_3.c ****     }
 163:Generated_Source\PSoC5/Clock_3.c ****     else
 164:Generated_Source\PSoC5/Clock_3.c ****     {
 165:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_CLKSTBY |= Clock_3_CLKSTBY_MASK;
 276              		.loc 1 165 0
 277 0022 064A     		ldr	r2, .L15
 278 0024 054B     		ldr	r3, .L15
 279 0026 1B78     		ldrb	r3, [r3]
 280 0028 DBB2     		uxtb	r3, r3
 281 002a 63F07F03 		orn	r3, r3, #127
 282 002e DBB2     		uxtb	r3, r3
 283 0030 1370     		strb	r3, [r2]
 284              	.L12:
 166:Generated_Source\PSoC5/Clock_3.c ****     }
 167:Generated_Source\PSoC5/Clock_3.c **** }
 285              		.loc 1 167 0
 286 0032 0C37     		adds	r7, r7, #12
 287              		.cfi_def_cfa_offset 4
 288 0034 BD46     		mov	sp, r7
 289              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 9


 290              		@ sp needed
 291 0036 5DF8047B 		ldr	r7, [sp], #4
 292              		.cfi_restore 7
 293              		.cfi_def_cfa_offset 0
 294 003a 7047     		bx	lr
 295              	.L16:
 296              		.align	2
 297              	.L15:
 298 003c B2430040 		.word	1073759154
 299              		.cfi_endproc
 300              	.LFE3:
 301              		.size	Clock_3_StandbyPower, .-Clock_3_StandbyPower
 302              		.section	.text.Clock_3_SetDividerRegister,"ax",%progbits
 303              		.align	2
 304              		.global	Clock_3_SetDividerRegister
 305              		.thumb
 306              		.thumb_func
 307              		.type	Clock_3_SetDividerRegister, %function
 308              	Clock_3_SetDividerRegister:
 309              	.LFB4:
 168:Generated_Source\PSoC5/Clock_3.c **** 
 169:Generated_Source\PSoC5/Clock_3.c **** 
 170:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
 171:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_SetDividerRegister
 172:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
 173:Generated_Source\PSoC5/Clock_3.c **** *
 174:Generated_Source\PSoC5/Clock_3.c **** * Summary:
 175:Generated_Source\PSoC5/Clock_3.c **** *  Modifies the clock divider and, thus, the frequency. When the clock divider
 176:Generated_Source\PSoC5/Clock_3.c **** *  register is set to zero or changed from zero, the clock will be temporarily
 177:Generated_Source\PSoC5/Clock_3.c **** *  disabled in order to change the SSS mode bit. If the clock is enabled when
 178:Generated_Source\PSoC5/Clock_3.c **** *  SetDividerRegister is called, then the source clock must be running.
 179:Generated_Source\PSoC5/Clock_3.c **** *
 180:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
 181:Generated_Source\PSoC5/Clock_3.c **** *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 182:Generated_Source\PSoC5/Clock_3.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 183:Generated_Source\PSoC5/Clock_3.c **** *    to divide the clock by 2, this parameter should be set to 1.
 184:Generated_Source\PSoC5/Clock_3.c **** *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 185:Generated_Source\PSoC5/Clock_3.c **** *   will be truncated and the new divide value will take effect immediately. If
 186:Generated_Source\PSoC5/Clock_3.c **** *   zero, the new divide value will take effect at the end of the current clock
 187:Generated_Source\PSoC5/Clock_3.c **** *   cycle.
 188:Generated_Source\PSoC5/Clock_3.c **** *
 189:Generated_Source\PSoC5/Clock_3.c **** * Returns:
 190:Generated_Source\PSoC5/Clock_3.c **** *  None
 191:Generated_Source\PSoC5/Clock_3.c **** *
 192:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
 193:Generated_Source\PSoC5/Clock_3.c **** void Clock_3_SetDividerRegister(uint16 clkDivider, uint8 restart)
 194:Generated_Source\PSoC5/Clock_3.c ****                                 
 195:Generated_Source\PSoC5/Clock_3.c **** {
 310              		.loc 1 195 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 16
 313              		@ frame_needed = 1, uses_anonymous_args = 0
 314 0000 80B5     		push	{r7, lr}
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 7, -8
 317              		.cfi_offset 14, -4
 318 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 10


 319              		.cfi_def_cfa_offset 24
 320 0004 00AF     		add	r7, sp, #0
 321              		.cfi_def_cfa_register 7
 322 0006 0346     		mov	r3, r0
 323 0008 0A46     		mov	r2, r1
 324 000a FB80     		strh	r3, [r7, #6]	@ movhi
 325 000c 1346     		mov	r3, r2
 326 000e 7B71     		strb	r3, [r7, #5]
 196:Generated_Source\PSoC5/Clock_3.c ****     uint8 enabled;
 197:Generated_Source\PSoC5/Clock_3.c **** 
 198:Generated_Source\PSoC5/Clock_3.c ****     uint8 currSrc = Clock_3_GetSourceRegister();
 327              		.loc 1 198 0
 328 0010 FFF7FEFF 		bl	Clock_3_GetSourceRegister
 329 0014 0346     		mov	r3, r0
 330 0016 FB73     		strb	r3, [r7, #15]
 199:Generated_Source\PSoC5/Clock_3.c ****     uint16 oldDivider = Clock_3_GetDividerRegister();
 331              		.loc 1 199 0
 332 0018 FFF7FEFF 		bl	Clock_3_GetDividerRegister
 333 001c 0346     		mov	r3, r0
 334 001e BB81     		strh	r3, [r7, #12]	@ movhi
 200:Generated_Source\PSoC5/Clock_3.c **** 
 201:Generated_Source\PSoC5/Clock_3.c ****     if (clkDivider != oldDivider)
 335              		.loc 1 201 0
 336 0020 FA88     		ldrh	r2, [r7, #6]
 337 0022 BB89     		ldrh	r3, [r7, #12]
 338 0024 9A42     		cmp	r2, r3
 339 0026 00F08780 		beq	.L17
 202:Generated_Source\PSoC5/Clock_3.c ****     {
 203:Generated_Source\PSoC5/Clock_3.c ****         enabled = Clock_3_CLKEN & Clock_3_CLKEN_MASK;
 340              		.loc 1 203 0
 341 002a 454B     		ldr	r3, .L30
 342 002c 1B78     		ldrb	r3, [r3]
 343 002e DBB2     		uxtb	r3, r3
 344 0030 23F07F03 		bic	r3, r3, #127
 345 0034 FB72     		strb	r3, [r7, #11]
 204:Generated_Source\PSoC5/Clock_3.c **** 
 205:Generated_Source\PSoC5/Clock_3.c ****         if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0
 346              		.loc 1 205 0
 347 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 348 0038 002B     		cmp	r3, #0
 349 003a 20D1     		bne	.L19
 350              		.loc 1 205 0 is_stmt 0 discriminator 1
 351 003c BB89     		ldrh	r3, [r7, #12]
 352 003e 002B     		cmp	r3, #0
 353 0040 02D0     		beq	.L20
 354              		.loc 1 205 0 discriminator 2
 355 0042 FB88     		ldrh	r3, [r7, #6]
 356 0044 002B     		cmp	r3, #0
 357 0046 1AD1     		bne	.L19
 358              	.L20:
 206:Generated_Source\PSoC5/Clock_3.c ****         {
 207:Generated_Source\PSoC5/Clock_3.c ****             /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 208:Generated_Source\PSoC5/Clock_3.c ****             if (oldDivider == 0u)
 359              		.loc 1 208 0 is_stmt 1
 360 0048 BB89     		ldrh	r3, [r7, #12]
 361 004a 002B     		cmp	r3, #0
 362 004c 0BD1     		bne	.L21
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 11


 209:Generated_Source\PSoC5/Clock_3.c ****             {
 210:Generated_Source\PSoC5/Clock_3.c ****                 /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 211:Generated_Source\PSoC5/Clock_3.c ****                 /* don't halt the clock.  Using the shadow load isn't required as the       */
 212:Generated_Source\PSoC5/Clock_3.c ****                 /* divider is ignored while SSS is set.                                     */
 213:Generated_Source\PSoC5/Clock_3.c ****                 CY_SET_REG16(Clock_3_DIV_PTR, clkDivider);
 363              		.loc 1 213 0
 364 004e 3D4A     		ldr	r2, .L30+4
 365 0050 FB88     		ldrh	r3, [r7, #6]	@ movhi
 366 0052 1380     		strh	r3, [r2]	@ movhi
 214:Generated_Source\PSoC5/Clock_3.c ****                 Clock_3_MOD_SRC &= (uint8)(~CYCLK_SSS);
 367              		.loc 1 214 0
 368 0054 3C4A     		ldr	r2, .L30+8
 369 0056 3C4B     		ldr	r3, .L30+8
 370 0058 1B78     		ldrb	r3, [r3]
 371 005a DBB2     		uxtb	r3, r3
 372 005c 23F04003 		bic	r3, r3, #64
 373 0060 DBB2     		uxtb	r3, r3
 374 0062 1370     		strb	r3, [r2]
 208:Generated_Source\PSoC5/Clock_3.c ****             {
 375              		.loc 1 208 0
 376 0064 68E0     		b	.L17
 377              	.L21:
 215:Generated_Source\PSoC5/Clock_3.c ****             }
 216:Generated_Source\PSoC5/Clock_3.c ****             else
 217:Generated_Source\PSoC5/Clock_3.c ****             {
 218:Generated_Source\PSoC5/Clock_3.c ****                 /* Moving to SSS, set SSS which then ignores the divider and we can set     */
 219:Generated_Source\PSoC5/Clock_3.c ****                 /* it without bothering with the shadow load.                               */
 220:Generated_Source\PSoC5/Clock_3.c ****                 Clock_3_MOD_SRC |= CYCLK_SSS;
 378              		.loc 1 220 0
 379 0066 384A     		ldr	r2, .L30+8
 380 0068 374B     		ldr	r3, .L30+8
 381 006a 1B78     		ldrb	r3, [r3]
 382 006c DBB2     		uxtb	r3, r3
 383 006e 43F04003 		orr	r3, r3, #64
 384 0072 DBB2     		uxtb	r3, r3
 385 0074 1370     		strb	r3, [r2]
 221:Generated_Source\PSoC5/Clock_3.c ****                 CY_SET_REG16(Clock_3_DIV_PTR, clkDivider);
 386              		.loc 1 221 0
 387 0076 334A     		ldr	r2, .L30+4
 388 0078 FB88     		ldrh	r3, [r7, #6]	@ movhi
 389 007a 1380     		strh	r3, [r2]	@ movhi
 208:Generated_Source\PSoC5/Clock_3.c ****             {
 390              		.loc 1 208 0
 391 007c 5CE0     		b	.L17
 392              	.L19:
 222:Generated_Source\PSoC5/Clock_3.c ****             }
 223:Generated_Source\PSoC5/Clock_3.c ****         }
 224:Generated_Source\PSoC5/Clock_3.c ****         else
 225:Generated_Source\PSoC5/Clock_3.c ****         {
 226:Generated_Source\PSoC5/Clock_3.c **** 			
 227:Generated_Source\PSoC5/Clock_3.c ****             if (enabled != 0u)
 393              		.loc 1 227 0
 394 007e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 395 0080 002B     		cmp	r3, #0
 396 0082 33D0     		beq	.L23
 228:Generated_Source\PSoC5/Clock_3.c ****             {
 229:Generated_Source\PSoC5/Clock_3.c ****                 CLK_DIST_LD = 0x00u;
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 12


 397              		.loc 1 229 0
 398 0084 314B     		ldr	r3, .L30+12
 399 0086 0022     		movs	r2, #0
 400 0088 1A70     		strb	r2, [r3]
 230:Generated_Source\PSoC5/Clock_3.c **** 
 231:Generated_Source\PSoC5/Clock_3.c ****                 /* Clear all the mask bits except ours. */
 232:Generated_Source\PSoC5/Clock_3.c **** #if defined(Clock_3__CFG3)
 233:Generated_Source\PSoC5/Clock_3.c ****                 CLK_DIST_AMASK = Clock_3_CLKEN_MASK;
 234:Generated_Source\PSoC5/Clock_3.c ****                 CLK_DIST_DMASK = 0x00u;
 235:Generated_Source\PSoC5/Clock_3.c **** #else
 236:Generated_Source\PSoC5/Clock_3.c ****                 CLK_DIST_DMASK = Clock_3_CLKEN_MASK;
 401              		.loc 1 236 0
 402 008a 314B     		ldr	r3, .L30+16
 403 008c 8022     		movs	r2, #128
 404 008e 1A70     		strb	r2, [r3]
 237:Generated_Source\PSoC5/Clock_3.c ****                 CLK_DIST_AMASK = 0x00u;
 405              		.loc 1 237 0
 406 0090 304B     		ldr	r3, .L30+20
 407 0092 0022     		movs	r2, #0
 408 0094 1A70     		strb	r2, [r3]
 238:Generated_Source\PSoC5/Clock_3.c **** #endif /* Clock_3__CFG3 */
 239:Generated_Source\PSoC5/Clock_3.c ****                 /* Clear mask of bus clock. */
 240:Generated_Source\PSoC5/Clock_3.c ****                 CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 409              		.loc 1 240 0
 410 0096 304A     		ldr	r2, .L30+24
 411 0098 2F4B     		ldr	r3, .L30+24
 412 009a 1B78     		ldrb	r3, [r3]
 413 009c DBB2     		uxtb	r3, r3
 414 009e 03F07F03 		and	r3, r3, #127
 415 00a2 DBB2     		uxtb	r3, r3
 416 00a4 1370     		strb	r3, [r2]
 241:Generated_Source\PSoC5/Clock_3.c **** 
 242:Generated_Source\PSoC5/Clock_3.c ****                 /* If clock is currently enabled, disable it if async or going from N-to-1*/
 243:Generated_Source\PSoC5/Clock_3.c ****                 if (((Clock_3_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 417              		.loc 1 243 0
 418 00a6 284B     		ldr	r3, .L30+8
 419 00a8 1B78     		ldrb	r3, [r3]
 420 00aa DBB2     		uxtb	r3, r3
 421 00ac 03F00803 		and	r3, r3, #8
 422 00b0 002B     		cmp	r3, #0
 423 00b2 02D0     		beq	.L24
 424              		.loc 1 243 0 is_stmt 0 discriminator 1
 425 00b4 FB88     		ldrh	r3, [r7, #6]
 426 00b6 002B     		cmp	r3, #0
 427 00b8 18D1     		bne	.L23
 428              	.L24:
 244:Generated_Source\PSoC5/Clock_3.c ****                 {
 245:Generated_Source\PSoC5/Clock_3.c **** #if HAS_CLKDIST_LD_DISABLE
 246:Generated_Source\PSoC5/Clock_3.c ****                     CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 429              		.loc 1 246 0 is_stmt 1
 430 00ba 284A     		ldr	r2, .L30+28
 431 00bc BB89     		ldrh	r3, [r7, #12]	@ movhi
 432 00be 1380     		strh	r3, [r2]	@ movhi
 247:Generated_Source\PSoC5/Clock_3.c ****                     CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 433              		.loc 1 247 0
 434 00c0 224B     		ldr	r3, .L30+12
 435 00c2 0722     		movs	r2, #7
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 13


 436 00c4 1A70     		strb	r2, [r3]
 248:Generated_Source\PSoC5/Clock_3.c **** 
 249:Generated_Source\PSoC5/Clock_3.c ****                     /* Wait for clock to be disabled */
 250:Generated_Source\PSoC5/Clock_3.c ****                     while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 437              		.loc 1 250 0
 438 00c6 00BF     		nop
 439              	.L25:
 440              		.loc 1 250 0 is_stmt 0 discriminator 1
 441 00c8 204B     		ldr	r3, .L30+12
 442 00ca 1B78     		ldrb	r3, [r3]
 443 00cc DBB2     		uxtb	r3, r3
 444 00ce 03F00103 		and	r3, r3, #1
 445 00d2 002B     		cmp	r3, #0
 446 00d4 F8D1     		bne	.L25
 251:Generated_Source\PSoC5/Clock_3.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 252:Generated_Source\PSoC5/Clock_3.c **** 
 253:Generated_Source\PSoC5/Clock_3.c ****                     Clock_3_CLKEN &= (uint8)(~Clock_3_CLKEN_MASK);
 447              		.loc 1 253 0 is_stmt 1
 448 00d6 1A4A     		ldr	r2, .L30
 449 00d8 194B     		ldr	r3, .L30
 450 00da 1B78     		ldrb	r3, [r3]
 451 00dc DBB2     		uxtb	r3, r3
 452 00de 03F07F03 		and	r3, r3, #127
 453 00e2 DBB2     		uxtb	r3, r3
 454 00e4 1370     		strb	r3, [r2]
 254:Generated_Source\PSoC5/Clock_3.c **** 
 255:Generated_Source\PSoC5/Clock_3.c **** #if HAS_CLKDIST_LD_DISABLE
 256:Generated_Source\PSoC5/Clock_3.c ****                     /* Clear the disable bit */
 257:Generated_Source\PSoC5/Clock_3.c ****                     CLK_DIST_LD = 0x00u;
 455              		.loc 1 257 0
 456 00e6 194B     		ldr	r3, .L30+12
 457 00e8 0022     		movs	r2, #0
 458 00ea 1A70     		strb	r2, [r3]
 459              	.L23:
 258:Generated_Source\PSoC5/Clock_3.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 259:Generated_Source\PSoC5/Clock_3.c ****                 }
 260:Generated_Source\PSoC5/Clock_3.c ****             }
 261:Generated_Source\PSoC5/Clock_3.c **** 
 262:Generated_Source\PSoC5/Clock_3.c ****             /* Load divide value. */
 263:Generated_Source\PSoC5/Clock_3.c ****             if ((Clock_3_CLKEN & Clock_3_CLKEN_MASK) != 0u)
 460              		.loc 1 263 0
 461 00ec 144B     		ldr	r3, .L30
 462 00ee 1B78     		ldrb	r3, [r3]
 463 00f0 DBB2     		uxtb	r3, r3
 464 00f2 DBB2     		uxtb	r3, r3
 465 00f4 5BB2     		sxtb	r3, r3
 466 00f6 002B     		cmp	r3, #0
 467 00f8 13DA     		bge	.L26
 264:Generated_Source\PSoC5/Clock_3.c ****             {
 265:Generated_Source\PSoC5/Clock_3.c ****                 /* If the clock is still enabled, use the shadow registers */
 266:Generated_Source\PSoC5/Clock_3.c ****                 CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 468              		.loc 1 266 0
 469 00fa 184A     		ldr	r2, .L30+28
 470 00fc FB88     		ldrh	r3, [r7, #6]	@ movhi
 471 00fe 1380     		strh	r3, [r2]	@ movhi
 267:Generated_Source\PSoC5/Clock_3.c **** 
 268:Generated_Source\PSoC5/Clock_3.c ****                 CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 14


 472              		.loc 1 268 0
 473 0100 124A     		ldr	r2, .L30+12
 474 0102 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 475 0104 002B     		cmp	r3, #0
 476 0106 01D0     		beq	.L27
 477              		.loc 1 268 0 is_stmt 0 discriminator 1
 478 0108 0323     		movs	r3, #3
 479 010a 00E0     		b	.L28
 480              	.L27:
 481              		.loc 1 268 0 discriminator 2
 482 010c 0123     		movs	r3, #1
 483              	.L28:
 484              		.loc 1 268 0 discriminator 4
 485 010e 1370     		strb	r3, [r2]
 269:Generated_Source\PSoC5/Clock_3.c ****                 while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 486              		.loc 1 269 0 is_stmt 1 discriminator 4
 487 0110 00BF     		nop
 488              	.L29:
 489              		.loc 1 269 0 is_stmt 0 discriminator 1
 490 0112 0E4B     		ldr	r3, .L30+12
 491 0114 1B78     		ldrb	r3, [r3]
 492 0116 DBB2     		uxtb	r3, r3
 493 0118 03F00103 		and	r3, r3, #1
 494 011c 002B     		cmp	r3, #0
 495 011e F8D1     		bne	.L29
 496 0120 0AE0     		b	.L17
 497              	.L26:
 270:Generated_Source\PSoC5/Clock_3.c ****             }
 271:Generated_Source\PSoC5/Clock_3.c ****             else
 272:Generated_Source\PSoC5/Clock_3.c ****             {
 273:Generated_Source\PSoC5/Clock_3.c ****                 /* If the clock is disabled, set the divider directly */
 274:Generated_Source\PSoC5/Clock_3.c ****                 CY_SET_REG16(Clock_3_DIV_PTR, clkDivider);
 498              		.loc 1 274 0 is_stmt 1
 499 0122 084A     		ldr	r2, .L30+4
 500 0124 FB88     		ldrh	r3, [r7, #6]	@ movhi
 501 0126 1380     		strh	r3, [r2]	@ movhi
 275:Generated_Source\PSoC5/Clock_3.c **** 				Clock_3_CLKEN |= enabled;
 502              		.loc 1 275 0
 503 0128 0549     		ldr	r1, .L30
 504 012a 054B     		ldr	r3, .L30
 505 012c 1B78     		ldrb	r3, [r3]
 506 012e DAB2     		uxtb	r2, r3
 507 0130 FB7A     		ldrb	r3, [r7, #11]
 508 0132 1343     		orrs	r3, r3, r2
 509 0134 DBB2     		uxtb	r3, r3
 510 0136 0B70     		strb	r3, [r1]
 511              	.L17:
 276:Generated_Source\PSoC5/Clock_3.c ****             }
 277:Generated_Source\PSoC5/Clock_3.c ****         }
 278:Generated_Source\PSoC5/Clock_3.c ****     }
 279:Generated_Source\PSoC5/Clock_3.c **** }
 512              		.loc 1 279 0
 513 0138 1037     		adds	r7, r7, #16
 514              		.cfi_def_cfa_offset 8
 515 013a BD46     		mov	sp, r7
 516              		.cfi_def_cfa_register 13
 517              		@ sp needed
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 15


 518 013c 80BD     		pop	{r7, pc}
 519              	.L31:
 520 013e 00BF     		.align	2
 521              	.L30:
 522 0140 A2430040 		.word	1073759138
 523 0144 9C400040 		.word	1073758364
 524 0148 9E400040 		.word	1073758366
 525 014c 01400040 		.word	1073758209
 526 0150 10400040 		.word	1073758224
 527 0154 14400040 		.word	1073758228
 528 0158 08400040 		.word	1073758216
 529 015c 02400040 		.word	1073758210
 530              		.cfi_endproc
 531              	.LFE4:
 532              		.size	Clock_3_SetDividerRegister, .-Clock_3_SetDividerRegister
 533              		.section	.text.Clock_3_GetDividerRegister,"ax",%progbits
 534              		.align	2
 535              		.global	Clock_3_GetDividerRegister
 536              		.thumb
 537              		.thumb_func
 538              		.type	Clock_3_GetDividerRegister, %function
 539              	Clock_3_GetDividerRegister:
 540              	.LFB5:
 280:Generated_Source\PSoC5/Clock_3.c **** 
 281:Generated_Source\PSoC5/Clock_3.c **** 
 282:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
 283:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_GetDividerRegister
 284:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
 285:Generated_Source\PSoC5/Clock_3.c **** *
 286:Generated_Source\PSoC5/Clock_3.c **** * Summary:
 287:Generated_Source\PSoC5/Clock_3.c **** *  Gets the clock divider register value.
 288:Generated_Source\PSoC5/Clock_3.c **** *
 289:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
 290:Generated_Source\PSoC5/Clock_3.c **** *  None
 291:Generated_Source\PSoC5/Clock_3.c **** *
 292:Generated_Source\PSoC5/Clock_3.c **** * Returns:
 293:Generated_Source\PSoC5/Clock_3.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 294:Generated_Source\PSoC5/Clock_3.c **** *  divide by 2, the return value will be 1.
 295:Generated_Source\PSoC5/Clock_3.c **** *
 296:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
 297:Generated_Source\PSoC5/Clock_3.c **** uint16 Clock_3_GetDividerRegister(void) 
 298:Generated_Source\PSoC5/Clock_3.c **** {
 541              		.loc 1 298 0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 1, uses_anonymous_args = 0
 545              		@ link register save eliminated.
 546 0000 80B4     		push	{r7}
 547              		.cfi_def_cfa_offset 4
 548              		.cfi_offset 7, -4
 549 0002 00AF     		add	r7, sp, #0
 550              		.cfi_def_cfa_register 7
 299:Generated_Source\PSoC5/Clock_3.c ****     return CY_GET_REG16(Clock_3_DIV_PTR);
 551              		.loc 1 299 0
 552 0004 034B     		ldr	r3, .L34
 553 0006 1B88     		ldrh	r3, [r3]	@ movhi
 554 0008 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 16


 300:Generated_Source\PSoC5/Clock_3.c **** }
 555              		.loc 1 300 0
 556 000a 1846     		mov	r0, r3
 557 000c BD46     		mov	sp, r7
 558              		.cfi_def_cfa_register 13
 559              		@ sp needed
 560 000e 5DF8047B 		ldr	r7, [sp], #4
 561              		.cfi_restore 7
 562              		.cfi_def_cfa_offset 0
 563 0012 7047     		bx	lr
 564              	.L35:
 565              		.align	2
 566              	.L34:
 567 0014 9C400040 		.word	1073758364
 568              		.cfi_endproc
 569              	.LFE5:
 570              		.size	Clock_3_GetDividerRegister, .-Clock_3_GetDividerRegister
 571              		.section	.text.Clock_3_SetModeRegister,"ax",%progbits
 572              		.align	2
 573              		.global	Clock_3_SetModeRegister
 574              		.thumb
 575              		.thumb_func
 576              		.type	Clock_3_SetModeRegister, %function
 577              	Clock_3_SetModeRegister:
 578              	.LFB6:
 301:Generated_Source\PSoC5/Clock_3.c **** 
 302:Generated_Source\PSoC5/Clock_3.c **** 
 303:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
 304:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_SetModeRegister
 305:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
 306:Generated_Source\PSoC5/Clock_3.c **** *
 307:Generated_Source\PSoC5/Clock_3.c **** * Summary:
 308:Generated_Source\PSoC5/Clock_3.c **** *  Sets flags that control the operating mode of the clock. This function only
 309:Generated_Source\PSoC5/Clock_3.c **** *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 310:Generated_Source\PSoC5/Clock_3.c **** *  To clear flags, use the ClearModeRegister function. The clock must be
 311:Generated_Source\PSoC5/Clock_3.c **** *  disabled before changing the mode.
 312:Generated_Source\PSoC5/Clock_3.c **** *
 313:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
 314:Generated_Source\PSoC5/Clock_3.c **** *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 315:Generated_Source\PSoC5/Clock_3.c **** *   clkMode should be a set of the following optional bits or'ed together.
 316:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 317:Generated_Source\PSoC5/Clock_3.c **** *                 occur when the divider count reaches half of the divide
 318:Generated_Source\PSoC5/Clock_3.c **** *                 value.
 319:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 320:Generated_Source\PSoC5/Clock_3.c **** *                 is asserted for approximately half of its period. When
 321:Generated_Source\PSoC5/Clock_3.c **** *                 disabled, the output clock is asserted for one period of the
 322:Generated_Source\PSoC5/Clock_3.c **** *                 source clock.
 323:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 324:Generated_Source\PSoC5/Clock_3.c **** *                 be enabled for all synchronous clocks.
 325:Generated_Source\PSoC5/Clock_3.c **** *   See the Technical Reference Manual for details about setting the mode of
 326:Generated_Source\PSoC5/Clock_3.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 327:Generated_Source\PSoC5/Clock_3.c **** *
 328:Generated_Source\PSoC5/Clock_3.c **** * Returns:
 329:Generated_Source\PSoC5/Clock_3.c **** *  None
 330:Generated_Source\PSoC5/Clock_3.c **** *
 331:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
 332:Generated_Source\PSoC5/Clock_3.c **** void Clock_3_SetModeRegister(uint8 modeBitMask) 
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 17


 333:Generated_Source\PSoC5/Clock_3.c **** {
 579              		.loc 1 333 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 8
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583              		@ link register save eliminated.
 584 0000 80B4     		push	{r7}
 585              		.cfi_def_cfa_offset 4
 586              		.cfi_offset 7, -4
 587 0002 83B0     		sub	sp, sp, #12
 588              		.cfi_def_cfa_offset 16
 589 0004 00AF     		add	r7, sp, #0
 590              		.cfi_def_cfa_register 7
 591 0006 0346     		mov	r3, r0
 592 0008 FB71     		strb	r3, [r7, #7]
 334:Generated_Source\PSoC5/Clock_3.c ****     Clock_3_MOD_SRC |= modeBitMask & (uint8)Clock_3_MODE_MASK;
 593              		.loc 1 334 0
 594 000a 094B     		ldr	r3, .L37
 595 000c 084A     		ldr	r2, .L37
 596 000e 1278     		ldrb	r2, [r2]
 597 0010 D2B2     		uxtb	r2, r2
 598 0012 D1B2     		uxtb	r1, r2
 599 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 600 0016 22F00702 		bic	r2, r2, #7
 601 001a D2B2     		uxtb	r2, r2
 602 001c 0A43     		orrs	r2, r2, r1
 603 001e D2B2     		uxtb	r2, r2
 604 0020 D2B2     		uxtb	r2, r2
 605 0022 1A70     		strb	r2, [r3]
 335:Generated_Source\PSoC5/Clock_3.c **** }
 606              		.loc 1 335 0
 607 0024 0C37     		adds	r7, r7, #12
 608              		.cfi_def_cfa_offset 4
 609 0026 BD46     		mov	sp, r7
 610              		.cfi_def_cfa_register 13
 611              		@ sp needed
 612 0028 5DF8047B 		ldr	r7, [sp], #4
 613              		.cfi_restore 7
 614              		.cfi_def_cfa_offset 0
 615 002c 7047     		bx	lr
 616              	.L38:
 617 002e 00BF     		.align	2
 618              	.L37:
 619 0030 9E400040 		.word	1073758366
 620              		.cfi_endproc
 621              	.LFE6:
 622              		.size	Clock_3_SetModeRegister, .-Clock_3_SetModeRegister
 623              		.section	.text.Clock_3_ClearModeRegister,"ax",%progbits
 624              		.align	2
 625              		.global	Clock_3_ClearModeRegister
 626              		.thumb
 627              		.thumb_func
 628              		.type	Clock_3_ClearModeRegister, %function
 629              	Clock_3_ClearModeRegister:
 630              	.LFB7:
 336:Generated_Source\PSoC5/Clock_3.c **** 
 337:Generated_Source\PSoC5/Clock_3.c **** 
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 18


 338:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
 339:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_ClearModeRegister
 340:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
 341:Generated_Source\PSoC5/Clock_3.c **** *
 342:Generated_Source\PSoC5/Clock_3.c **** * Summary:
 343:Generated_Source\PSoC5/Clock_3.c **** *  Clears flags that control the operating mode of the clock. This function
 344:Generated_Source\PSoC5/Clock_3.c **** *  only changes flags from 1 to 0; flags that are already 0 will remain
 345:Generated_Source\PSoC5/Clock_3.c **** *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 346:Generated_Source\PSoC5/Clock_3.c **** *  disabled before changing the mode.
 347:Generated_Source\PSoC5/Clock_3.c **** *
 348:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
 349:Generated_Source\PSoC5/Clock_3.c **** *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 350:Generated_Source\PSoC5/Clock_3.c **** *   clkMode should be a set of the following optional bits or'ed together.
 351:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 352:Generated_Source\PSoC5/Clock_3.c **** *                 occur when the divider count reaches half of the divide
 353:Generated_Source\PSoC5/Clock_3.c **** *                 value.
 354:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 355:Generated_Source\PSoC5/Clock_3.c **** *                 is asserted for approximately half of its period. When
 356:Generated_Source\PSoC5/Clock_3.c **** *                 disabled, the output clock is asserted for one period of the
 357:Generated_Source\PSoC5/Clock_3.c **** *                 source clock.
 358:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 359:Generated_Source\PSoC5/Clock_3.c **** *                 be enabled for all synchronous clocks.
 360:Generated_Source\PSoC5/Clock_3.c **** *   See the Technical Reference Manual for details about setting the mode of
 361:Generated_Source\PSoC5/Clock_3.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 362:Generated_Source\PSoC5/Clock_3.c **** *
 363:Generated_Source\PSoC5/Clock_3.c **** * Returns:
 364:Generated_Source\PSoC5/Clock_3.c **** *  None
 365:Generated_Source\PSoC5/Clock_3.c **** *
 366:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
 367:Generated_Source\PSoC5/Clock_3.c **** void Clock_3_ClearModeRegister(uint8 modeBitMask) 
 368:Generated_Source\PSoC5/Clock_3.c **** {
 631              		.loc 1 368 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 8
 634              		@ frame_needed = 1, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 636 0000 80B4     		push	{r7}
 637              		.cfi_def_cfa_offset 4
 638              		.cfi_offset 7, -4
 639 0002 83B0     		sub	sp, sp, #12
 640              		.cfi_def_cfa_offset 16
 641 0004 00AF     		add	r7, sp, #0
 642              		.cfi_def_cfa_register 7
 643 0006 0346     		mov	r3, r0
 644 0008 FB71     		strb	r3, [r7, #7]
 369:Generated_Source\PSoC5/Clock_3.c ****     Clock_3_MOD_SRC &= (uint8)(~modeBitMask) | (uint8)(~(uint8)(Clock_3_MODE_MASK));
 645              		.loc 1 369 0
 646 000a 0949     		ldr	r1, .L40
 647 000c 084B     		ldr	r3, .L40
 648 000e 1B78     		ldrb	r3, [r3]
 649 0010 DAB2     		uxtb	r2, r3
 650 0012 FB79     		ldrb	r3, [r7, #7]
 651 0014 DB43     		mvns	r3, r3
 652 0016 DBB2     		uxtb	r3, r3
 653 0018 43F00703 		orr	r3, r3, #7
 654 001c DBB2     		uxtb	r3, r3
 655 001e 1340     		ands	r3, r3, r2
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 19


 656 0020 DBB2     		uxtb	r3, r3
 657 0022 0B70     		strb	r3, [r1]
 370:Generated_Source\PSoC5/Clock_3.c **** }
 658              		.loc 1 370 0
 659 0024 0C37     		adds	r7, r7, #12
 660              		.cfi_def_cfa_offset 4
 661 0026 BD46     		mov	sp, r7
 662              		.cfi_def_cfa_register 13
 663              		@ sp needed
 664 0028 5DF8047B 		ldr	r7, [sp], #4
 665              		.cfi_restore 7
 666              		.cfi_def_cfa_offset 0
 667 002c 7047     		bx	lr
 668              	.L41:
 669 002e 00BF     		.align	2
 670              	.L40:
 671 0030 9E400040 		.word	1073758366
 672              		.cfi_endproc
 673              	.LFE7:
 674              		.size	Clock_3_ClearModeRegister, .-Clock_3_ClearModeRegister
 675              		.section	.text.Clock_3_GetModeRegister,"ax",%progbits
 676              		.align	2
 677              		.global	Clock_3_GetModeRegister
 678              		.thumb
 679              		.thumb_func
 680              		.type	Clock_3_GetModeRegister, %function
 681              	Clock_3_GetModeRegister:
 682              	.LFB8:
 371:Generated_Source\PSoC5/Clock_3.c **** 
 372:Generated_Source\PSoC5/Clock_3.c **** 
 373:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
 374:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_GetModeRegister
 375:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
 376:Generated_Source\PSoC5/Clock_3.c **** *
 377:Generated_Source\PSoC5/Clock_3.c **** * Summary:
 378:Generated_Source\PSoC5/Clock_3.c **** *  Gets the clock mode register value.
 379:Generated_Source\PSoC5/Clock_3.c **** *
 380:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
 381:Generated_Source\PSoC5/Clock_3.c **** *  None
 382:Generated_Source\PSoC5/Clock_3.c **** *
 383:Generated_Source\PSoC5/Clock_3.c **** * Returns:
 384:Generated_Source\PSoC5/Clock_3.c **** *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 385:Generated_Source\PSoC5/Clock_3.c **** *  ClearModeRegister descriptions for details about the mode bits.
 386:Generated_Source\PSoC5/Clock_3.c **** *
 387:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
 388:Generated_Source\PSoC5/Clock_3.c **** uint8 Clock_3_GetModeRegister(void) 
 389:Generated_Source\PSoC5/Clock_3.c **** {
 683              		.loc 1 389 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688 0000 80B4     		push	{r7}
 689              		.cfi_def_cfa_offset 4
 690              		.cfi_offset 7, -4
 691 0002 00AF     		add	r7, sp, #0
 692              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 20


 390:Generated_Source\PSoC5/Clock_3.c ****     return Clock_3_MOD_SRC & (uint8)(Clock_3_MODE_MASK);
 693              		.loc 1 390 0
 694 0004 054B     		ldr	r3, .L44
 695 0006 1B78     		ldrb	r3, [r3]
 696 0008 DBB2     		uxtb	r3, r3
 697 000a 23F00703 		bic	r3, r3, #7
 698 000e DBB2     		uxtb	r3, r3
 391:Generated_Source\PSoC5/Clock_3.c **** }
 699              		.loc 1 391 0
 700 0010 1846     		mov	r0, r3
 701 0012 BD46     		mov	sp, r7
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 0014 5DF8047B 		ldr	r7, [sp], #4
 705              		.cfi_restore 7
 706              		.cfi_def_cfa_offset 0
 707 0018 7047     		bx	lr
 708              	.L45:
 709 001a 00BF     		.align	2
 710              	.L44:
 711 001c 9E400040 		.word	1073758366
 712              		.cfi_endproc
 713              	.LFE8:
 714              		.size	Clock_3_GetModeRegister, .-Clock_3_GetModeRegister
 715              		.section	.text.Clock_3_SetSourceRegister,"ax",%progbits
 716              		.align	2
 717              		.global	Clock_3_SetSourceRegister
 718              		.thumb
 719              		.thumb_func
 720              		.type	Clock_3_SetSourceRegister, %function
 721              	Clock_3_SetSourceRegister:
 722              	.LFB9:
 392:Generated_Source\PSoC5/Clock_3.c **** 
 393:Generated_Source\PSoC5/Clock_3.c **** 
 394:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
 395:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_SetSourceRegister
 396:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
 397:Generated_Source\PSoC5/Clock_3.c **** *
 398:Generated_Source\PSoC5/Clock_3.c **** * Summary:
 399:Generated_Source\PSoC5/Clock_3.c **** *  Sets the input source of the clock. The clock must be disabled before
 400:Generated_Source\PSoC5/Clock_3.c **** *  changing the source. The old and new clock sources must be running.
 401:Generated_Source\PSoC5/Clock_3.c **** *
 402:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
 403:Generated_Source\PSoC5/Clock_3.c **** *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 404:Generated_Source\PSoC5/Clock_3.c **** *   following input sources:
 405:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SRC_SEL_SYNC_DIG
 406:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SRC_SEL_IMO
 407:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SRC_SEL_XTALM
 408:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SRC_SEL_ILO
 409:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SRC_SEL_PLL
 410:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SRC_SEL_XTALK
 411:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SRC_SEL_DSI_G
 412:Generated_Source\PSoC5/Clock_3.c **** *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 413:Generated_Source\PSoC5/Clock_3.c **** *   See the Technical Reference Manual for details on clock sources.
 414:Generated_Source\PSoC5/Clock_3.c **** *
 415:Generated_Source\PSoC5/Clock_3.c **** * Returns:
 416:Generated_Source\PSoC5/Clock_3.c **** *  None
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 21


 417:Generated_Source\PSoC5/Clock_3.c **** *
 418:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
 419:Generated_Source\PSoC5/Clock_3.c **** void Clock_3_SetSourceRegister(uint8 clkSource) 
 420:Generated_Source\PSoC5/Clock_3.c **** {
 723              		.loc 1 420 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 16
 726              		@ frame_needed = 1, uses_anonymous_args = 0
 727 0000 80B5     		push	{r7, lr}
 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 7, -8
 730              		.cfi_offset 14, -4
 731 0002 84B0     		sub	sp, sp, #16
 732              		.cfi_def_cfa_offset 24
 733 0004 00AF     		add	r7, sp, #0
 734              		.cfi_def_cfa_register 7
 735 0006 0346     		mov	r3, r0
 736 0008 FB71     		strb	r3, [r7, #7]
 421:Generated_Source\PSoC5/Clock_3.c ****     uint16 currDiv = Clock_3_GetDividerRegister();
 737              		.loc 1 421 0
 738 000a FFF7FEFF 		bl	Clock_3_GetDividerRegister
 739 000e 0346     		mov	r3, r0
 740 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 422:Generated_Source\PSoC5/Clock_3.c ****     uint8 oldSrc = Clock_3_GetSourceRegister();
 741              		.loc 1 422 0
 742 0012 FFF7FEFF 		bl	Clock_3_GetSourceRegister
 743 0016 0346     		mov	r3, r0
 744 0018 7B73     		strb	r3, [r7, #13]
 423:Generated_Source\PSoC5/Clock_3.c **** 
 424:Generated_Source\PSoC5/Clock_3.c ****     if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 745              		.loc 1 424 0
 746 001a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 747 001c 002B     		cmp	r3, #0
 748 001e 1BD0     		beq	.L47
 749              		.loc 1 424 0 is_stmt 0 discriminator 1
 750 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 751 0022 002B     		cmp	r3, #0
 752 0024 18D1     		bne	.L47
 425:Generated_Source\PSoC5/Clock_3.c ****         (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 753              		.loc 1 425 0 is_stmt 1
 754 0026 FB89     		ldrh	r3, [r7, #14]
 755 0028 002B     		cmp	r3, #0
 756 002a 15D1     		bne	.L47
 426:Generated_Source\PSoC5/Clock_3.c ****     {
 427:Generated_Source\PSoC5/Clock_3.c ****         /* Switching to Master and divider is 1, set SSS, which will output master, */
 428:Generated_Source\PSoC5/Clock_3.c ****         /* then set the source so we are consistent.                                */
 429:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_MOD_SRC |= CYCLK_SSS;
 757              		.loc 1 429 0
 758 002c 224A     		ldr	r2, .L50
 759 002e 224B     		ldr	r3, .L50
 760 0030 1B78     		ldrb	r3, [r3]
 761 0032 DBB2     		uxtb	r3, r3
 762 0034 43F04003 		orr	r3, r3, #64
 763 0038 DBB2     		uxtb	r3, r3
 764 003a 1370     		strb	r3, [r2]
 430:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_MOD_SRC =
 765              		.loc 1 430 0
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 22


 766 003c 1E4B     		ldr	r3, .L50
 431:Generated_Source\PSoC5/Clock_3.c ****             (Clock_3_MOD_SRC & (uint8)(~Clock_3_SRC_SEL_MSK)) | clkSource;
 767              		.loc 1 431 0
 768 003e 1E4A     		ldr	r2, .L50
 769 0040 1278     		ldrb	r2, [r2]
 770 0042 D2B2     		uxtb	r2, r2
 430:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_MOD_SRC =
 771              		.loc 1 430 0
 772 0044 D2B2     		uxtb	r2, r2
 773 0046 22F00702 		bic	r2, r2, #7
 774 004a D1B2     		uxtb	r1, r2
 775 004c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 776 004e 0A43     		orrs	r2, r2, r1
 777 0050 D2B2     		uxtb	r2, r2
 778 0052 D2B2     		uxtb	r2, r2
 779 0054 1A70     		strb	r2, [r3]
 780 0056 2BE0     		b	.L46
 781              	.L47:
 432:Generated_Source\PSoC5/Clock_3.c ****     }
 433:Generated_Source\PSoC5/Clock_3.c ****     else if (((oldSrc == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 782              		.loc 1 433 0
 783 0058 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 784 005a 002B     		cmp	r3, #0
 785 005c 1BD1     		bne	.L49
 786              		.loc 1 433 0 is_stmt 0 discriminator 1
 787 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 788 0060 002B     		cmp	r3, #0
 789 0062 18D0     		beq	.L49
 434:Generated_Source\PSoC5/Clock_3.c ****             (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 790              		.loc 1 434 0 is_stmt 1
 791 0064 FB89     		ldrh	r3, [r7, #14]
 792 0066 002B     		cmp	r3, #0
 793 0068 15D1     		bne	.L49
 435:Generated_Source\PSoC5/Clock_3.c ****     {
 436:Generated_Source\PSoC5/Clock_3.c ****         /* Switching from Master to not and divider is 1, set source, so we don't   */
 437:Generated_Source\PSoC5/Clock_3.c ****         /* lock when we clear SSS.                                                  */
 438:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_MOD_SRC =
 794              		.loc 1 438 0
 795 006a 134B     		ldr	r3, .L50
 439:Generated_Source\PSoC5/Clock_3.c ****             (Clock_3_MOD_SRC & (uint8)(~Clock_3_SRC_SEL_MSK)) | clkSource;
 796              		.loc 1 439 0
 797 006c 124A     		ldr	r2, .L50
 798 006e 1278     		ldrb	r2, [r2]
 799 0070 D2B2     		uxtb	r2, r2
 438:Generated_Source\PSoC5/Clock_3.c ****             (Clock_3_MOD_SRC & (uint8)(~Clock_3_SRC_SEL_MSK)) | clkSource;
 800              		.loc 1 438 0
 801 0072 D2B2     		uxtb	r2, r2
 802 0074 22F00702 		bic	r2, r2, #7
 803 0078 D1B2     		uxtb	r1, r2
 804 007a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 805 007c 0A43     		orrs	r2, r2, r1
 806 007e D2B2     		uxtb	r2, r2
 807 0080 D2B2     		uxtb	r2, r2
 808 0082 1A70     		strb	r2, [r3]
 440:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_MOD_SRC &= (uint8)(~CYCLK_SSS);
 809              		.loc 1 440 0
 810 0084 0C4A     		ldr	r2, .L50
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 23


 811 0086 0C4B     		ldr	r3, .L50
 812 0088 1B78     		ldrb	r3, [r3]
 813 008a DBB2     		uxtb	r3, r3
 814 008c 23F04003 		bic	r3, r3, #64
 815 0090 DBB2     		uxtb	r3, r3
 816 0092 1370     		strb	r3, [r2]
 817 0094 0CE0     		b	.L46
 818              	.L49:
 441:Generated_Source\PSoC5/Clock_3.c ****     }
 442:Generated_Source\PSoC5/Clock_3.c ****     else
 443:Generated_Source\PSoC5/Clock_3.c ****     {
 444:Generated_Source\PSoC5/Clock_3.c ****         Clock_3_MOD_SRC =
 819              		.loc 1 444 0
 820 0096 084B     		ldr	r3, .L50
 445:Generated_Source\PSoC5/Clock_3.c ****             (Clock_3_MOD_SRC & (uint8)(~Clock_3_SRC_SEL_MSK)) | clkSource;
 821              		.loc 1 445 0
 822 0098 074A     		ldr	r2, .L50
 823 009a 1278     		ldrb	r2, [r2]
 824 009c D2B2     		uxtb	r2, r2
 444:Generated_Source\PSoC5/Clock_3.c ****             (Clock_3_MOD_SRC & (uint8)(~Clock_3_SRC_SEL_MSK)) | clkSource;
 825              		.loc 1 444 0
 826 009e D2B2     		uxtb	r2, r2
 827 00a0 22F00702 		bic	r2, r2, #7
 828 00a4 D1B2     		uxtb	r1, r2
 829 00a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 830 00a8 0A43     		orrs	r2, r2, r1
 831 00aa D2B2     		uxtb	r2, r2
 832 00ac D2B2     		uxtb	r2, r2
 833 00ae 1A70     		strb	r2, [r3]
 834              	.L46:
 446:Generated_Source\PSoC5/Clock_3.c ****     }
 447:Generated_Source\PSoC5/Clock_3.c **** }
 835              		.loc 1 447 0
 836 00b0 1037     		adds	r7, r7, #16
 837              		.cfi_def_cfa_offset 8
 838 00b2 BD46     		mov	sp, r7
 839              		.cfi_def_cfa_register 13
 840              		@ sp needed
 841 00b4 80BD     		pop	{r7, pc}
 842              	.L51:
 843 00b6 00BF     		.align	2
 844              	.L50:
 845 00b8 9E400040 		.word	1073758366
 846              		.cfi_endproc
 847              	.LFE9:
 848              		.size	Clock_3_SetSourceRegister, .-Clock_3_SetSourceRegister
 849              		.section	.text.Clock_3_GetSourceRegister,"ax",%progbits
 850              		.align	2
 851              		.global	Clock_3_GetSourceRegister
 852              		.thumb
 853              		.thumb_func
 854              		.type	Clock_3_GetSourceRegister, %function
 855              	Clock_3_GetSourceRegister:
 856              	.LFB10:
 448:Generated_Source\PSoC5/Clock_3.c **** 
 449:Generated_Source\PSoC5/Clock_3.c **** 
 450:Generated_Source\PSoC5/Clock_3.c **** /*******************************************************************************
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 24


 451:Generated_Source\PSoC5/Clock_3.c **** * Function Name: Clock_3_GetSourceRegister
 452:Generated_Source\PSoC5/Clock_3.c **** ********************************************************************************
 453:Generated_Source\PSoC5/Clock_3.c **** *
 454:Generated_Source\PSoC5/Clock_3.c **** * Summary:
 455:Generated_Source\PSoC5/Clock_3.c **** *  Gets the input source of the clock.
 456:Generated_Source\PSoC5/Clock_3.c **** *
 457:Generated_Source\PSoC5/Clock_3.c **** * Parameters:
 458:Generated_Source\PSoC5/Clock_3.c **** *  None
 459:Generated_Source\PSoC5/Clock_3.c **** *
 460:Generated_Source\PSoC5/Clock_3.c **** * Returns:
 461:Generated_Source\PSoC5/Clock_3.c **** *  The input source of the clock. See SetSourceRegister for details.
 462:Generated_Source\PSoC5/Clock_3.c **** *
 463:Generated_Source\PSoC5/Clock_3.c **** *******************************************************************************/
 464:Generated_Source\PSoC5/Clock_3.c **** uint8 Clock_3_GetSourceRegister(void) 
 465:Generated_Source\PSoC5/Clock_3.c **** {
 857              		.loc 1 465 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 1, uses_anonymous_args = 0
 861              		@ link register save eliminated.
 862 0000 80B4     		push	{r7}
 863              		.cfi_def_cfa_offset 4
 864              		.cfi_offset 7, -4
 865 0002 00AF     		add	r7, sp, #0
 866              		.cfi_def_cfa_register 7
 466:Generated_Source\PSoC5/Clock_3.c ****     return Clock_3_MOD_SRC & Clock_3_SRC_SEL_MSK;
 867              		.loc 1 466 0
 868 0004 054B     		ldr	r3, .L54
 869 0006 1B78     		ldrb	r3, [r3]
 870 0008 DBB2     		uxtb	r3, r3
 871 000a 03F00703 		and	r3, r3, #7
 872 000e DBB2     		uxtb	r3, r3
 467:Generated_Source\PSoC5/Clock_3.c **** }
 873              		.loc 1 467 0
 874 0010 1846     		mov	r0, r3
 875 0012 BD46     		mov	sp, r7
 876              		.cfi_def_cfa_register 13
 877              		@ sp needed
 878 0014 5DF8047B 		ldr	r7, [sp], #4
 879              		.cfi_restore 7
 880              		.cfi_def_cfa_offset 0
 881 0018 7047     		bx	lr
 882              	.L55:
 883 001a 00BF     		.align	2
 884              	.L54:
 885 001c 9E400040 		.word	1073758366
 886              		.cfi_endproc
 887              	.LFE10:
 888              		.size	Clock_3_GetSourceRegister, .-Clock_3_GetSourceRegister
 889              		.text
 890              	.Letext0:
 891              		.file 2 "Generated_Source\\PSoC5/cytypes.h"
 892              		.section	.debug_info,"",%progbits
 893              	.Ldebug_info0:
 894 0000 59020000 		.4byte	0x259
 895 0004 0400     		.2byte	0x4
 896 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 25


 897 000a 04       		.byte	0x4
 898 000b 01       		.uleb128 0x1
 899 000c EE000000 		.4byte	.LASF37
 900 0010 01       		.byte	0x1
 901 0011 1B000000 		.4byte	.LASF38
 902 0015 AC020000 		.4byte	.LASF39
 903 0019 00000000 		.4byte	.Ldebug_ranges0+0
 904 001d 00000000 		.4byte	0
 905 0021 00000000 		.4byte	.Ldebug_line0
 906 0025 02       		.uleb128 0x2
 907 0026 01       		.byte	0x1
 908 0027 06       		.byte	0x6
 909 0028 E6010000 		.4byte	.LASF0
 910 002c 02       		.uleb128 0x2
 911 002d 01       		.byte	0x1
 912 002e 08       		.byte	0x8
 913 002f B7010000 		.4byte	.LASF1
 914 0033 02       		.uleb128 0x2
 915 0034 02       		.byte	0x2
 916 0035 05       		.byte	0x5
 917 0036 4A000000 		.4byte	.LASF2
 918 003a 02       		.uleb128 0x2
 919 003b 02       		.byte	0x2
 920 003c 07       		.byte	0x7
 921 003d 16020000 		.4byte	.LASF3
 922 0041 02       		.uleb128 0x2
 923 0042 04       		.byte	0x4
 924 0043 05       		.byte	0x5
 925 0044 2E020000 		.4byte	.LASF4
 926 0048 02       		.uleb128 0x2
 927 0049 04       		.byte	0x4
 928 004a 07       		.byte	0x7
 929 004b 73020000 		.4byte	.LASF5
 930 004f 02       		.uleb128 0x2
 931 0050 08       		.byte	0x8
 932 0051 05       		.byte	0x5
 933 0052 C8000000 		.4byte	.LASF6
 934 0056 02       		.uleb128 0x2
 935 0057 08       		.byte	0x8
 936 0058 07       		.byte	0x7
 937 0059 F2010000 		.4byte	.LASF7
 938 005d 03       		.uleb128 0x3
 939 005e 04       		.byte	0x4
 940 005f 05       		.byte	0x5
 941 0060 696E7400 		.ascii	"int\000"
 942 0064 02       		.uleb128 0x2
 943 0065 04       		.byte	0x4
 944 0066 07       		.byte	0x7
 945 0067 09020000 		.4byte	.LASF8
 946 006b 04       		.uleb128 0x4
 947 006c B1000000 		.4byte	.LASF9
 948 0070 02       		.byte	0x2
 949 0071 3801     		.2byte	0x138
 950 0073 2C000000 		.4byte	0x2c
 951 0077 04       		.uleb128 0x4
 952 0078 8E000000 		.4byte	.LASF10
 953 007c 02       		.byte	0x2
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 26


 954 007d 3901     		.2byte	0x139
 955 007f 3A000000 		.4byte	0x3a
 956 0083 02       		.uleb128 0x2
 957 0084 04       		.byte	0x4
 958 0085 04       		.byte	0x4
 959 0086 C2000000 		.4byte	.LASF11
 960 008a 02       		.uleb128 0x2
 961 008b 08       		.byte	0x8
 962 008c 04       		.byte	0x4
 963 008d 85020000 		.4byte	.LASF12
 964 0091 02       		.uleb128 0x2
 965 0092 01       		.byte	0x1
 966 0093 08       		.byte	0x8
 967 0094 29020000 		.4byte	.LASF13
 968 0098 04       		.uleb128 0x4
 969 0099 6E020000 		.4byte	.LASF14
 970 009d 02       		.byte	0x2
 971 009e E201     		.2byte	0x1e2
 972 00a0 A4000000 		.4byte	0xa4
 973 00a4 05       		.uleb128 0x5
 974 00a5 6B000000 		.4byte	0x6b
 975 00a9 04       		.uleb128 0x4
 976 00aa 44000000 		.4byte	.LASF15
 977 00ae 02       		.byte	0x2
 978 00af E301     		.2byte	0x1e3
 979 00b1 B5000000 		.4byte	0xb5
 980 00b5 05       		.uleb128 0x5
 981 00b6 77000000 		.4byte	0x77
 982 00ba 06       		.uleb128 0x6
 983 00bb 54000000 		.4byte	.LASF16
 984 00bf 01       		.byte	0x1
 985 00c0 2D       		.byte	0x2d
 986 00c1 00000000 		.4byte	.LFB0
 987 00c5 34000000 		.4byte	.LFE0-.LFB0
 988 00c9 01       		.uleb128 0x1
 989 00ca 9C       		.byte	0x9c
 990 00cb 06       		.uleb128 0x6
 991 00cc A4000000 		.4byte	.LASF17
 992 00d0 01       		.byte	0x1
 993 00d1 47       		.byte	0x47
 994 00d2 00000000 		.4byte	.LFB1
 995 00d6 34000000 		.4byte	.LFE1-.LFB1
 996 00da 01       		.uleb128 0x1
 997 00db 9C       		.byte	0x9c
 998 00dc 07       		.uleb128 0x7
 999 00dd 62000000 		.4byte	.LASF18
 1000 00e1 01       		.byte	0x1
 1001 00e2 64       		.byte	0x64
 1002 00e3 00000000 		.4byte	.LFB2
 1003 00e7 B0000000 		.4byte	.LFE2-.LFB2
 1004 00eb 01       		.uleb128 0x1
 1005 00ec 9C       		.byte	0x9c
 1006 00ed 0A010000 		.4byte	0x10a
 1007 00f1 08       		.uleb128 0x8
 1008 00f2 14000000 		.4byte	.LBB2
 1009 00f6 70000000 		.4byte	.LBE2-.LBB2
 1010 00fa 09       		.uleb128 0x9
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 27


 1011 00fb 49020000 		.4byte	.LASF24
 1012 00ff 01       		.byte	0x1
 1013 0100 69       		.byte	0x69
 1014 0101 77000000 		.4byte	0x77
 1015 0105 02       		.uleb128 0x2
 1016 0106 91       		.byte	0x91
 1017 0107 76       		.sleb128 -10
 1018 0108 00       		.byte	0
 1019 0109 00       		.byte	0
 1020 010a 07       		.uleb128 0x7
 1021 010b D1010000 		.4byte	.LASF19
 1022 010f 01       		.byte	0x1
 1023 0110 9D       		.byte	0x9d
 1024 0111 00000000 		.4byte	.LFB3
 1025 0115 40000000 		.4byte	.LFE3-.LFB3
 1026 0119 01       		.uleb128 0x1
 1027 011a 9C       		.byte	0x9c
 1028 011b 2E010000 		.4byte	0x12e
 1029 011f 0A       		.uleb128 0xa
 1030 0120 B1010000 		.4byte	.LASF21
 1031 0124 01       		.byte	0x1
 1032 0125 9D       		.byte	0x9d
 1033 0126 6B000000 		.4byte	0x6b
 1034 012a 02       		.uleb128 0x2
 1035 012b 91       		.byte	0x91
 1036 012c 77       		.sleb128 -9
 1037 012d 00       		.byte	0
 1038 012e 0B       		.uleb128 0xb
 1039 012f 96010000 		.4byte	.LASF20
 1040 0133 01       		.byte	0x1
 1041 0134 C1       		.byte	0xc1
 1042 0135 00000000 		.4byte	.LFB4
 1043 0139 60010000 		.4byte	.LFE4-.LFB4
 1044 013d 01       		.uleb128 0x1
 1045 013e 9C       		.byte	0x9c
 1046 013f 8A010000 		.4byte	0x18a
 1047 0143 0A       		.uleb128 0xa
 1048 0144 B7000000 		.4byte	.LASF22
 1049 0148 01       		.byte	0x1
 1050 0149 C1       		.byte	0xc1
 1051 014a 77000000 		.4byte	0x77
 1052 014e 02       		.uleb128 0x2
 1053 014f 91       		.byte	0x91
 1054 0150 6E       		.sleb128 -18
 1055 0151 0A       		.uleb128 0xa
 1056 0152 95000000 		.4byte	.LASF23
 1057 0156 01       		.byte	0x1
 1058 0157 C1       		.byte	0xc1
 1059 0158 6B000000 		.4byte	0x6b
 1060 015c 02       		.uleb128 0x2
 1061 015d 91       		.byte	0x91
 1062 015e 6D       		.sleb128 -19
 1063 015f 09       		.uleb128 0x9
 1064 0160 A4020000 		.4byte	.LASF25
 1065 0164 01       		.byte	0x1
 1066 0165 C4       		.byte	0xc4
 1067 0166 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 28


 1068 016a 02       		.uleb128 0x2
 1069 016b 91       		.byte	0x91
 1070 016c 73       		.sleb128 -13
 1071 016d 09       		.uleb128 0x9
 1072 016e 41020000 		.4byte	.LASF26
 1073 0172 01       		.byte	0x1
 1074 0173 C6       		.byte	0xc6
 1075 0174 6B000000 		.4byte	0x6b
 1076 0178 02       		.uleb128 0x2
 1077 0179 91       		.byte	0x91
 1078 017a 77       		.sleb128 -9
 1079 017b 09       		.uleb128 0x9
 1080 017c 49020000 		.4byte	.LASF24
 1081 0180 01       		.byte	0x1
 1082 0181 C7       		.byte	0xc7
 1083 0182 77000000 		.4byte	0x77
 1084 0186 02       		.uleb128 0x2
 1085 0187 91       		.byte	0x91
 1086 0188 74       		.sleb128 -12
 1087 0189 00       		.byte	0
 1088 018a 0C       		.uleb128 0xc
 1089 018b 00000000 		.4byte	.LASF30
 1090 018f 01       		.byte	0x1
 1091 0190 2901     		.2byte	0x129
 1092 0192 77000000 		.4byte	0x77
 1093 0196 00000000 		.4byte	.LFB5
 1094 019a 18000000 		.4byte	.LFE5-.LFB5
 1095 019e 01       		.uleb128 0x1
 1096 019f 9C       		.byte	0x9c
 1097 01a0 0D       		.uleb128 0xd
 1098 01a1 D6000000 		.4byte	.LASF27
 1099 01a5 01       		.byte	0x1
 1100 01a6 4C01     		.2byte	0x14c
 1101 01a8 00000000 		.4byte	.LFB6
 1102 01ac 34000000 		.4byte	.LFE6-.LFB6
 1103 01b0 01       		.uleb128 0x1
 1104 01b1 9C       		.byte	0x9c
 1105 01b2 C6010000 		.4byte	0x1c6
 1106 01b6 0E       		.uleb128 0xe
 1107 01b7 C5010000 		.4byte	.LASF28
 1108 01bb 01       		.byte	0x1
 1109 01bc 4C01     		.2byte	0x14c
 1110 01be 6B000000 		.4byte	0x6b
 1111 01c2 02       		.uleb128 0x2
 1112 01c3 91       		.byte	0x91
 1113 01c4 77       		.sleb128 -9
 1114 01c5 00       		.byte	0
 1115 01c6 0D       		.uleb128 0xd
 1116 01c7 7C010000 		.4byte	.LASF29
 1117 01cb 01       		.byte	0x1
 1118 01cc 6F01     		.2byte	0x16f
 1119 01ce 00000000 		.4byte	.LFB7
 1120 01d2 34000000 		.4byte	.LFE7-.LFB7
 1121 01d6 01       		.uleb128 0x1
 1122 01d7 9C       		.byte	0x9c
 1123 01d8 EC010000 		.4byte	0x1ec
 1124 01dc 0E       		.uleb128 0xe
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 29


 1125 01dd C5010000 		.4byte	.LASF28
 1126 01e1 01       		.byte	0x1
 1127 01e2 6F01     		.2byte	0x16f
 1128 01e4 6B000000 		.4byte	0x6b
 1129 01e8 02       		.uleb128 0x2
 1130 01e9 91       		.byte	0x91
 1131 01ea 77       		.sleb128 -9
 1132 01eb 00       		.byte	0
 1133 01ec 0C       		.uleb128 0xc
 1134 01ed 8C020000 		.4byte	.LASF31
 1135 01f1 01       		.byte	0x1
 1136 01f2 8401     		.2byte	0x184
 1137 01f4 6B000000 		.4byte	0x6b
 1138 01f8 00000000 		.4byte	.LFB8
 1139 01fc 20000000 		.4byte	.LFE8-.LFB8
 1140 0200 01       		.uleb128 0x1
 1141 0201 9C       		.byte	0x9c
 1142 0202 0F       		.uleb128 0xf
 1143 0203 54020000 		.4byte	.LASF32
 1144 0207 01       		.byte	0x1
 1145 0208 A301     		.2byte	0x1a3
 1146 020a 00000000 		.4byte	.LFB9
 1147 020e BC000000 		.4byte	.LFE9-.LFB9
 1148 0212 01       		.uleb128 0x1
 1149 0213 9C       		.byte	0x9c
 1150 0214 46020000 		.4byte	0x246
 1151 0218 0E       		.uleb128 0xe
 1152 0219 37020000 		.4byte	.LASF33
 1153 021d 01       		.byte	0x1
 1154 021e A301     		.2byte	0x1a3
 1155 0220 6B000000 		.4byte	0x6b
 1156 0224 02       		.uleb128 0x2
 1157 0225 91       		.byte	0x91
 1158 0226 6F       		.sleb128 -17
 1159 0227 10       		.uleb128 0x10
 1160 0228 3C000000 		.4byte	.LASF34
 1161 022c 01       		.byte	0x1
 1162 022d A501     		.2byte	0x1a5
 1163 022f 77000000 		.4byte	0x77
 1164 0233 02       		.uleb128 0x2
 1165 0234 91       		.byte	0x91
 1166 0235 76       		.sleb128 -10
 1167 0236 10       		.uleb128 0x10
 1168 0237 9D000000 		.4byte	.LASF35
 1169 023b 01       		.byte	0x1
 1170 023c A601     		.2byte	0x1a6
 1171 023e 6B000000 		.4byte	0x6b
 1172 0242 02       		.uleb128 0x2
 1173 0243 91       		.byte	0x91
 1174 0244 75       		.sleb128 -11
 1175 0245 00       		.byte	0
 1176 0246 0C       		.uleb128 0xc
 1177 0247 74000000 		.4byte	.LASF36
 1178 024b 01       		.byte	0x1
 1179 024c D001     		.2byte	0x1d0
 1180 024e 6B000000 		.4byte	0x6b
 1181 0252 00000000 		.4byte	.LFB10
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 30


 1182 0256 20000000 		.4byte	.LFE10-.LFB10
 1183 025a 01       		.uleb128 0x1
 1184 025b 9C       		.byte	0x9c
 1185 025c 00       		.byte	0
 1186              		.section	.debug_abbrev,"",%progbits
 1187              	.Ldebug_abbrev0:
 1188 0000 01       		.uleb128 0x1
 1189 0001 11       		.uleb128 0x11
 1190 0002 01       		.byte	0x1
 1191 0003 25       		.uleb128 0x25
 1192 0004 0E       		.uleb128 0xe
 1193 0005 13       		.uleb128 0x13
 1194 0006 0B       		.uleb128 0xb
 1195 0007 03       		.uleb128 0x3
 1196 0008 0E       		.uleb128 0xe
 1197 0009 1B       		.uleb128 0x1b
 1198 000a 0E       		.uleb128 0xe
 1199 000b 55       		.uleb128 0x55
 1200 000c 17       		.uleb128 0x17
 1201 000d 11       		.uleb128 0x11
 1202 000e 01       		.uleb128 0x1
 1203 000f 10       		.uleb128 0x10
 1204 0010 17       		.uleb128 0x17
 1205 0011 00       		.byte	0
 1206 0012 00       		.byte	0
 1207 0013 02       		.uleb128 0x2
 1208 0014 24       		.uleb128 0x24
 1209 0015 00       		.byte	0
 1210 0016 0B       		.uleb128 0xb
 1211 0017 0B       		.uleb128 0xb
 1212 0018 3E       		.uleb128 0x3e
 1213 0019 0B       		.uleb128 0xb
 1214 001a 03       		.uleb128 0x3
 1215 001b 0E       		.uleb128 0xe
 1216 001c 00       		.byte	0
 1217 001d 00       		.byte	0
 1218 001e 03       		.uleb128 0x3
 1219 001f 24       		.uleb128 0x24
 1220 0020 00       		.byte	0
 1221 0021 0B       		.uleb128 0xb
 1222 0022 0B       		.uleb128 0xb
 1223 0023 3E       		.uleb128 0x3e
 1224 0024 0B       		.uleb128 0xb
 1225 0025 03       		.uleb128 0x3
 1226 0026 08       		.uleb128 0x8
 1227 0027 00       		.byte	0
 1228 0028 00       		.byte	0
 1229 0029 04       		.uleb128 0x4
 1230 002a 16       		.uleb128 0x16
 1231 002b 00       		.byte	0
 1232 002c 03       		.uleb128 0x3
 1233 002d 0E       		.uleb128 0xe
 1234 002e 3A       		.uleb128 0x3a
 1235 002f 0B       		.uleb128 0xb
 1236 0030 3B       		.uleb128 0x3b
 1237 0031 05       		.uleb128 0x5
 1238 0032 49       		.uleb128 0x49
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 31


 1239 0033 13       		.uleb128 0x13
 1240 0034 00       		.byte	0
 1241 0035 00       		.byte	0
 1242 0036 05       		.uleb128 0x5
 1243 0037 35       		.uleb128 0x35
 1244 0038 00       		.byte	0
 1245 0039 49       		.uleb128 0x49
 1246 003a 13       		.uleb128 0x13
 1247 003b 00       		.byte	0
 1248 003c 00       		.byte	0
 1249 003d 06       		.uleb128 0x6
 1250 003e 2E       		.uleb128 0x2e
 1251 003f 00       		.byte	0
 1252 0040 3F       		.uleb128 0x3f
 1253 0041 19       		.uleb128 0x19
 1254 0042 03       		.uleb128 0x3
 1255 0043 0E       		.uleb128 0xe
 1256 0044 3A       		.uleb128 0x3a
 1257 0045 0B       		.uleb128 0xb
 1258 0046 3B       		.uleb128 0x3b
 1259 0047 0B       		.uleb128 0xb
 1260 0048 27       		.uleb128 0x27
 1261 0049 19       		.uleb128 0x19
 1262 004a 11       		.uleb128 0x11
 1263 004b 01       		.uleb128 0x1
 1264 004c 12       		.uleb128 0x12
 1265 004d 06       		.uleb128 0x6
 1266 004e 40       		.uleb128 0x40
 1267 004f 18       		.uleb128 0x18
 1268 0050 9742     		.uleb128 0x2117
 1269 0052 19       		.uleb128 0x19
 1270 0053 00       		.byte	0
 1271 0054 00       		.byte	0
 1272 0055 07       		.uleb128 0x7
 1273 0056 2E       		.uleb128 0x2e
 1274 0057 01       		.byte	0x1
 1275 0058 3F       		.uleb128 0x3f
 1276 0059 19       		.uleb128 0x19
 1277 005a 03       		.uleb128 0x3
 1278 005b 0E       		.uleb128 0xe
 1279 005c 3A       		.uleb128 0x3a
 1280 005d 0B       		.uleb128 0xb
 1281 005e 3B       		.uleb128 0x3b
 1282 005f 0B       		.uleb128 0xb
 1283 0060 27       		.uleb128 0x27
 1284 0061 19       		.uleb128 0x19
 1285 0062 11       		.uleb128 0x11
 1286 0063 01       		.uleb128 0x1
 1287 0064 12       		.uleb128 0x12
 1288 0065 06       		.uleb128 0x6
 1289 0066 40       		.uleb128 0x40
 1290 0067 18       		.uleb128 0x18
 1291 0068 9742     		.uleb128 0x2117
 1292 006a 19       		.uleb128 0x19
 1293 006b 01       		.uleb128 0x1
 1294 006c 13       		.uleb128 0x13
 1295 006d 00       		.byte	0
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 32


 1296 006e 00       		.byte	0
 1297 006f 08       		.uleb128 0x8
 1298 0070 0B       		.uleb128 0xb
 1299 0071 01       		.byte	0x1
 1300 0072 11       		.uleb128 0x11
 1301 0073 01       		.uleb128 0x1
 1302 0074 12       		.uleb128 0x12
 1303 0075 06       		.uleb128 0x6
 1304 0076 00       		.byte	0
 1305 0077 00       		.byte	0
 1306 0078 09       		.uleb128 0x9
 1307 0079 34       		.uleb128 0x34
 1308 007a 00       		.byte	0
 1309 007b 03       		.uleb128 0x3
 1310 007c 0E       		.uleb128 0xe
 1311 007d 3A       		.uleb128 0x3a
 1312 007e 0B       		.uleb128 0xb
 1313 007f 3B       		.uleb128 0x3b
 1314 0080 0B       		.uleb128 0xb
 1315 0081 49       		.uleb128 0x49
 1316 0082 13       		.uleb128 0x13
 1317 0083 02       		.uleb128 0x2
 1318 0084 18       		.uleb128 0x18
 1319 0085 00       		.byte	0
 1320 0086 00       		.byte	0
 1321 0087 0A       		.uleb128 0xa
 1322 0088 05       		.uleb128 0x5
 1323 0089 00       		.byte	0
 1324 008a 03       		.uleb128 0x3
 1325 008b 0E       		.uleb128 0xe
 1326 008c 3A       		.uleb128 0x3a
 1327 008d 0B       		.uleb128 0xb
 1328 008e 3B       		.uleb128 0x3b
 1329 008f 0B       		.uleb128 0xb
 1330 0090 49       		.uleb128 0x49
 1331 0091 13       		.uleb128 0x13
 1332 0092 02       		.uleb128 0x2
 1333 0093 18       		.uleb128 0x18
 1334 0094 00       		.byte	0
 1335 0095 00       		.byte	0
 1336 0096 0B       		.uleb128 0xb
 1337 0097 2E       		.uleb128 0x2e
 1338 0098 01       		.byte	0x1
 1339 0099 3F       		.uleb128 0x3f
 1340 009a 19       		.uleb128 0x19
 1341 009b 03       		.uleb128 0x3
 1342 009c 0E       		.uleb128 0xe
 1343 009d 3A       		.uleb128 0x3a
 1344 009e 0B       		.uleb128 0xb
 1345 009f 3B       		.uleb128 0x3b
 1346 00a0 0B       		.uleb128 0xb
 1347 00a1 27       		.uleb128 0x27
 1348 00a2 19       		.uleb128 0x19
 1349 00a3 11       		.uleb128 0x11
 1350 00a4 01       		.uleb128 0x1
 1351 00a5 12       		.uleb128 0x12
 1352 00a6 06       		.uleb128 0x6
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 33


 1353 00a7 40       		.uleb128 0x40
 1354 00a8 18       		.uleb128 0x18
 1355 00a9 9642     		.uleb128 0x2116
 1356 00ab 19       		.uleb128 0x19
 1357 00ac 01       		.uleb128 0x1
 1358 00ad 13       		.uleb128 0x13
 1359 00ae 00       		.byte	0
 1360 00af 00       		.byte	0
 1361 00b0 0C       		.uleb128 0xc
 1362 00b1 2E       		.uleb128 0x2e
 1363 00b2 00       		.byte	0
 1364 00b3 3F       		.uleb128 0x3f
 1365 00b4 19       		.uleb128 0x19
 1366 00b5 03       		.uleb128 0x3
 1367 00b6 0E       		.uleb128 0xe
 1368 00b7 3A       		.uleb128 0x3a
 1369 00b8 0B       		.uleb128 0xb
 1370 00b9 3B       		.uleb128 0x3b
 1371 00ba 05       		.uleb128 0x5
 1372 00bb 27       		.uleb128 0x27
 1373 00bc 19       		.uleb128 0x19
 1374 00bd 49       		.uleb128 0x49
 1375 00be 13       		.uleb128 0x13
 1376 00bf 11       		.uleb128 0x11
 1377 00c0 01       		.uleb128 0x1
 1378 00c1 12       		.uleb128 0x12
 1379 00c2 06       		.uleb128 0x6
 1380 00c3 40       		.uleb128 0x40
 1381 00c4 18       		.uleb128 0x18
 1382 00c5 9742     		.uleb128 0x2117
 1383 00c7 19       		.uleb128 0x19
 1384 00c8 00       		.byte	0
 1385 00c9 00       		.byte	0
 1386 00ca 0D       		.uleb128 0xd
 1387 00cb 2E       		.uleb128 0x2e
 1388 00cc 01       		.byte	0x1
 1389 00cd 3F       		.uleb128 0x3f
 1390 00ce 19       		.uleb128 0x19
 1391 00cf 03       		.uleb128 0x3
 1392 00d0 0E       		.uleb128 0xe
 1393 00d1 3A       		.uleb128 0x3a
 1394 00d2 0B       		.uleb128 0xb
 1395 00d3 3B       		.uleb128 0x3b
 1396 00d4 05       		.uleb128 0x5
 1397 00d5 27       		.uleb128 0x27
 1398 00d6 19       		.uleb128 0x19
 1399 00d7 11       		.uleb128 0x11
 1400 00d8 01       		.uleb128 0x1
 1401 00d9 12       		.uleb128 0x12
 1402 00da 06       		.uleb128 0x6
 1403 00db 40       		.uleb128 0x40
 1404 00dc 18       		.uleb128 0x18
 1405 00dd 9742     		.uleb128 0x2117
 1406 00df 19       		.uleb128 0x19
 1407 00e0 01       		.uleb128 0x1
 1408 00e1 13       		.uleb128 0x13
 1409 00e2 00       		.byte	0
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 34


 1410 00e3 00       		.byte	0
 1411 00e4 0E       		.uleb128 0xe
 1412 00e5 05       		.uleb128 0x5
 1413 00e6 00       		.byte	0
 1414 00e7 03       		.uleb128 0x3
 1415 00e8 0E       		.uleb128 0xe
 1416 00e9 3A       		.uleb128 0x3a
 1417 00ea 0B       		.uleb128 0xb
 1418 00eb 3B       		.uleb128 0x3b
 1419 00ec 05       		.uleb128 0x5
 1420 00ed 49       		.uleb128 0x49
 1421 00ee 13       		.uleb128 0x13
 1422 00ef 02       		.uleb128 0x2
 1423 00f0 18       		.uleb128 0x18
 1424 00f1 00       		.byte	0
 1425 00f2 00       		.byte	0
 1426 00f3 0F       		.uleb128 0xf
 1427 00f4 2E       		.uleb128 0x2e
 1428 00f5 01       		.byte	0x1
 1429 00f6 3F       		.uleb128 0x3f
 1430 00f7 19       		.uleb128 0x19
 1431 00f8 03       		.uleb128 0x3
 1432 00f9 0E       		.uleb128 0xe
 1433 00fa 3A       		.uleb128 0x3a
 1434 00fb 0B       		.uleb128 0xb
 1435 00fc 3B       		.uleb128 0x3b
 1436 00fd 05       		.uleb128 0x5
 1437 00fe 27       		.uleb128 0x27
 1438 00ff 19       		.uleb128 0x19
 1439 0100 11       		.uleb128 0x11
 1440 0101 01       		.uleb128 0x1
 1441 0102 12       		.uleb128 0x12
 1442 0103 06       		.uleb128 0x6
 1443 0104 40       		.uleb128 0x40
 1444 0105 18       		.uleb128 0x18
 1445 0106 9642     		.uleb128 0x2116
 1446 0108 19       		.uleb128 0x19
 1447 0109 01       		.uleb128 0x1
 1448 010a 13       		.uleb128 0x13
 1449 010b 00       		.byte	0
 1450 010c 00       		.byte	0
 1451 010d 10       		.uleb128 0x10
 1452 010e 34       		.uleb128 0x34
 1453 010f 00       		.byte	0
 1454 0110 03       		.uleb128 0x3
 1455 0111 0E       		.uleb128 0xe
 1456 0112 3A       		.uleb128 0x3a
 1457 0113 0B       		.uleb128 0xb
 1458 0114 3B       		.uleb128 0x3b
 1459 0115 05       		.uleb128 0x5
 1460 0116 49       		.uleb128 0x49
 1461 0117 13       		.uleb128 0x13
 1462 0118 02       		.uleb128 0x2
 1463 0119 18       		.uleb128 0x18
 1464 011a 00       		.byte	0
 1465 011b 00       		.byte	0
 1466 011c 00       		.byte	0
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 35


 1467              		.section	.debug_aranges,"",%progbits
 1468 0000 6C000000 		.4byte	0x6c
 1469 0004 0200     		.2byte	0x2
 1470 0006 00000000 		.4byte	.Ldebug_info0
 1471 000a 04       		.byte	0x4
 1472 000b 00       		.byte	0
 1473 000c 0000     		.2byte	0
 1474 000e 0000     		.2byte	0
 1475 0010 00000000 		.4byte	.LFB0
 1476 0014 34000000 		.4byte	.LFE0-.LFB0
 1477 0018 00000000 		.4byte	.LFB1
 1478 001c 34000000 		.4byte	.LFE1-.LFB1
 1479 0020 00000000 		.4byte	.LFB2
 1480 0024 B0000000 		.4byte	.LFE2-.LFB2
 1481 0028 00000000 		.4byte	.LFB3
 1482 002c 40000000 		.4byte	.LFE3-.LFB3
 1483 0030 00000000 		.4byte	.LFB4
 1484 0034 60010000 		.4byte	.LFE4-.LFB4
 1485 0038 00000000 		.4byte	.LFB5
 1486 003c 18000000 		.4byte	.LFE5-.LFB5
 1487 0040 00000000 		.4byte	.LFB6
 1488 0044 34000000 		.4byte	.LFE6-.LFB6
 1489 0048 00000000 		.4byte	.LFB7
 1490 004c 34000000 		.4byte	.LFE7-.LFB7
 1491 0050 00000000 		.4byte	.LFB8
 1492 0054 20000000 		.4byte	.LFE8-.LFB8
 1493 0058 00000000 		.4byte	.LFB9
 1494 005c BC000000 		.4byte	.LFE9-.LFB9
 1495 0060 00000000 		.4byte	.LFB10
 1496 0064 20000000 		.4byte	.LFE10-.LFB10
 1497 0068 00000000 		.4byte	0
 1498 006c 00000000 		.4byte	0
 1499              		.section	.debug_ranges,"",%progbits
 1500              	.Ldebug_ranges0:
 1501 0000 00000000 		.4byte	.LFB0
 1502 0004 34000000 		.4byte	.LFE0
 1503 0008 00000000 		.4byte	.LFB1
 1504 000c 34000000 		.4byte	.LFE1
 1505 0010 00000000 		.4byte	.LFB2
 1506 0014 B0000000 		.4byte	.LFE2
 1507 0018 00000000 		.4byte	.LFB3
 1508 001c 40000000 		.4byte	.LFE3
 1509 0020 00000000 		.4byte	.LFB4
 1510 0024 60010000 		.4byte	.LFE4
 1511 0028 00000000 		.4byte	.LFB5
 1512 002c 18000000 		.4byte	.LFE5
 1513 0030 00000000 		.4byte	.LFB6
 1514 0034 34000000 		.4byte	.LFE6
 1515 0038 00000000 		.4byte	.LFB7
 1516 003c 34000000 		.4byte	.LFE7
 1517 0040 00000000 		.4byte	.LFB8
 1518 0044 20000000 		.4byte	.LFE8
 1519 0048 00000000 		.4byte	.LFB9
 1520 004c BC000000 		.4byte	.LFE9
 1521 0050 00000000 		.4byte	.LFB10
 1522 0054 20000000 		.4byte	.LFE10
 1523 0058 00000000 		.4byte	0
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 36


 1524 005c 00000000 		.4byte	0
 1525              		.section	.debug_line,"",%progbits
 1526              	.Ldebug_line0:
 1527 0000 9E010000 		.section	.debug_str,"MS",%progbits,1
 1527      02004400 
 1527      00000201 
 1527      FB0E0D00 
 1527      01010101 
 1528              	.LASF30:
 1529 0000 436C6F63 		.ascii	"Clock_3_GetDividerRegister\000"
 1529      6B5F335F 
 1529      47657444 
 1529      69766964 
 1529      65725265 
 1530              	.LASF38:
 1531 001b 47656E65 		.ascii	"Generated_Source\\PSoC5\\Clock_3.c\000"
 1531      72617465 
 1531      645F536F 
 1531      75726365 
 1531      5C50536F 
 1532              	.LASF34:
 1533 003c 63757272 		.ascii	"currDiv\000"
 1533      44697600 
 1534              	.LASF15:
 1535 0044 72656731 		.ascii	"reg16\000"
 1535      3600
 1536              	.LASF2:
 1537 004a 73686F72 		.ascii	"short int\000"
 1537      7420696E 
 1537      7400
 1538              	.LASF16:
 1539 0054 436C6F63 		.ascii	"Clock_3_Start\000"
 1539      6B5F335F 
 1539      53746172 
 1539      7400
 1540              	.LASF18:
 1541 0062 436C6F63 		.ascii	"Clock_3_StopBlock\000"
 1541      6B5F335F 
 1541      53746F70 
 1541      426C6F63 
 1541      6B00
 1542              	.LASF36:
 1543 0074 436C6F63 		.ascii	"Clock_3_GetSourceRegister\000"
 1543      6B5F335F 
 1543      47657453 
 1543      6F757263 
 1543      65526567 
 1544              	.LASF10:
 1545 008e 75696E74 		.ascii	"uint16\000"
 1545      313600
 1546              	.LASF23:
 1547 0095 72657374 		.ascii	"restart\000"
 1547      61727400 
 1548              	.LASF35:
 1549 009d 6F6C6453 		.ascii	"oldSrc\000"
 1549      726300
 1550              	.LASF17:
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 37


 1551 00a4 436C6F63 		.ascii	"Clock_3_Stop\000"
 1551      6B5F335F 
 1551      53746F70 
 1551      00
 1552              	.LASF9:
 1553 00b1 75696E74 		.ascii	"uint8\000"
 1553      3800
 1554              	.LASF22:
 1555 00b7 636C6B44 		.ascii	"clkDivider\000"
 1555      69766964 
 1555      657200
 1556              	.LASF11:
 1557 00c2 666C6F61 		.ascii	"float\000"
 1557      7400
 1558              	.LASF6:
 1559 00c8 6C6F6E67 		.ascii	"long long int\000"
 1559      206C6F6E 
 1559      6720696E 
 1559      7400
 1560              	.LASF27:
 1561 00d6 436C6F63 		.ascii	"Clock_3_SetModeRegister\000"
 1561      6B5F335F 
 1561      5365744D 
 1561      6F646552 
 1561      65676973 
 1562              	.LASF37:
 1563 00ee 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1563      4320342E 
 1563      392E3320 
 1563      32303135 
 1563      30333033 
 1564 0121 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1564      20726576 
 1564      6973696F 
 1564      6E203232 
 1564      31323230 
 1565 0154 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1565      66756E63 
 1565      74696F6E 
 1565      2D736563 
 1565      74696F6E 
 1566              	.LASF29:
 1567 017c 436C6F63 		.ascii	"Clock_3_ClearModeRegister\000"
 1567      6B5F335F 
 1567      436C6561 
 1567      724D6F64 
 1567      65526567 
 1568              	.LASF20:
 1569 0196 436C6F63 		.ascii	"Clock_3_SetDividerRegister\000"
 1569      6B5F335F 
 1569      53657444 
 1569      69766964 
 1569      65725265 
 1570              	.LASF21:
 1571 01b1 73746174 		.ascii	"state\000"
 1571      6500
 1572              	.LASF1:
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 38


 1573 01b7 756E7369 		.ascii	"unsigned char\000"
 1573      676E6564 
 1573      20636861 
 1573      7200
 1574              	.LASF28:
 1575 01c5 6D6F6465 		.ascii	"modeBitMask\000"
 1575      4269744D 
 1575      61736B00 
 1576              	.LASF19:
 1577 01d1 436C6F63 		.ascii	"Clock_3_StandbyPower\000"
 1577      6B5F335F 
 1577      5374616E 
 1577      64627950 
 1577      6F776572 
 1578              	.LASF0:
 1579 01e6 7369676E 		.ascii	"signed char\000"
 1579      65642063 
 1579      68617200 
 1580              	.LASF7:
 1581 01f2 6C6F6E67 		.ascii	"long long unsigned int\000"
 1581      206C6F6E 
 1581      6720756E 
 1581      7369676E 
 1581      65642069 
 1582              	.LASF8:
 1583 0209 756E7369 		.ascii	"unsigned int\000"
 1583      676E6564 
 1583      20696E74 
 1583      00
 1584              	.LASF3:
 1585 0216 73686F72 		.ascii	"short unsigned int\000"
 1585      7420756E 
 1585      7369676E 
 1585      65642069 
 1585      6E7400
 1586              	.LASF13:
 1587 0229 63686172 		.ascii	"char\000"
 1587      00
 1588              	.LASF4:
 1589 022e 6C6F6E67 		.ascii	"long int\000"
 1589      20696E74 
 1589      00
 1590              	.LASF33:
 1591 0237 636C6B53 		.ascii	"clkSource\000"
 1591      6F757263 
 1591      6500
 1592              	.LASF26:
 1593 0241 63757272 		.ascii	"currSrc\000"
 1593      53726300 
 1594              	.LASF24:
 1595 0249 6F6C6444 		.ascii	"oldDivider\000"
 1595      69766964 
 1595      657200
 1596              	.LASF32:
 1597 0254 436C6F63 		.ascii	"Clock_3_SetSourceRegister\000"
 1597      6B5F335F 
 1597      53657453 
ARM GAS  C:\Users\Bruger\AppData\Local\Temp\ccRQRiBh.s 			page 39


 1597      6F757263 
 1597      65526567 
 1598              	.LASF14:
 1599 026e 72656738 		.ascii	"reg8\000"
 1599      00
 1600              	.LASF5:
 1601 0273 6C6F6E67 		.ascii	"long unsigned int\000"
 1601      20756E73 
 1601      69676E65 
 1601      6420696E 
 1601      7400
 1602              	.LASF12:
 1603 0285 646F7562 		.ascii	"double\000"
 1603      6C6500
 1604              	.LASF31:
 1605 028c 436C6F63 		.ascii	"Clock_3_GetModeRegister\000"
 1605      6B5F335F 
 1605      4765744D 
 1605      6F646552 
 1605      65676973 
 1606              	.LASF25:
 1607 02a4 656E6162 		.ascii	"enabled\000"
 1607      6C656400 
 1608              	.LASF39:
 1609 02ac 433A5C55 		.ascii	"C:\\Users\\Bruger\\Desktop\\CODE\\PSOC5\\CY8CKIT-59"
 1609      73657273 
 1609      5C427275 
 1609      6765725C 
 1609      4465736B 
 1610 02d9 2D417264 		.ascii	"-Arduino\\CY8CKIT59_Ardudino-Speeduino.cydsn\000"
 1610      75696E6F 
 1610      5C435938 
 1610      434B4954 
 1610      35395F41 
 1611              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
